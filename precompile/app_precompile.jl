precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt16})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(Setfield.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(BangBang.NoBang.__init__)})
precompile(Tuple{typeof(BangBang.__init__)})
precompile(Tuple{typeof(Transducers.__init__)})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{BangBang.var"#32#44"})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{BangBang.var"#33#45"})
precompile(Tuple{BangBang.var"#34#46"})
precompile(Tuple{typeof(BangBang.include), String})
precompile(Tuple{Transducers.var"#280#295"})
precompile(Tuple{Transducers.var"#281#296"})
precompile(Tuple{Transducers.var"#282#297"})
precompile(Tuple{typeof(Transducers.include), String})
precompile(Tuple{Transducers.var"#283#298"})
precompile(Tuple{Transducers.var"#284#299"})
precompile(Tuple{Transducers.var"#285#300"})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{Setfield.var"#14#17"})
precompile(Tuple{Setfield.var"#15#18"})
precompile(Tuple{Setfield.var"#16#19"})
precompile(Tuple{BangBang.NoBang.var"#6#9"})
precompile(Tuple{BangBang.NoBang.var"#7#10"})
precompile(Tuple{BangBang.NoBang.var"#8#11"})
precompile(Tuple{typeof(BangBang.NoBang.include), String})
precompile(Tuple{BangBang.var"#23#35"})
precompile(Tuple{BangBang.var"#24#36"})
precompile(Tuple{BangBang.var"#25#37"})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.pkgdir), Module})
precompile(Tuple{typeof(Base.Filesystem.readdir), String})
precompile(Tuple{Test.var"#@testset", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{Test.var"#@test", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), Any, Any})
precompile(Tuple{typeof(Test.get_test_result), Any, Any})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, Any})
precompile(Tuple{Test.var"##DefaultTestSet#23", Any, Type{Test.DefaultTestSet}, Any})
precompile(Tuple{Type{Test.DefaultTestSet}, AbstractString, Array{T, 1} where T, Int64, Bool, Bool})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.Filesystem.tempname)})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{typeof(Base.readlines), String})
precompile(Tuple{Type{Base.Set{T} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Base.Set{String}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{String, 1}}}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Tuple{Int64}}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{BangBang.NoBang.Empty{Base.Set{T} where T}}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Base.Val{true}}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{BangBang.NoBang.Empty{Array{T, 1} where T}}}, Int64})
precompile(Tuple{Base.var"##s79#169", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol, N} where N}, Type{var"#s79"} where var"#s79"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{BangBang.NoBang.Empty{Array{T, 1} where T}, Base.Val{true}}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Base.Colon}}, Int64})
precompile(Tuple{Transducers.AutoObjectsReStacker.var"##s1#1", Any, Any})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{StaticArrays.var"##s26#2", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{1}})
precompile(Tuple{Base.var"#@_inline_meta", LineNumberNode, Module})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}}}, Int64})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{CRISPRofftargetHunter.var"#43#47"}}, Int64})
precompile(Tuple{ConstructionBase.var"##s26#3", Any, Any})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Base.Sort.MergeSortAlg, Nothing, Nothing}}, Int64})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Transducers.InitOf{Transducers.DefaultInitOf{OP} where OP}}}, Int64})
precompile(Tuple{typeof(Base.isstructtype), Type})
precompile(Tuple{typeof(Base.map), Transducers.AutoObjectsReStacker.var"#4#7", Tuple{Symbol}})
precompile(Tuple{typeof(Base.map), Transducers.AutoObjectsReStacker.var"#4#7", Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{InitialValues.InitialValueOf{typeof(Base.add_sum)}}}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.main), Array{String, 1}})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, Symbol}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s3", 1} where var"#s3"<:AbstractString}}, String})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, ArgParse.ArgParseSettings, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Function})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Symbol}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type, :required), T} where T<:Tuple}, Tuple{String, DataType, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{Type{NamedTuple{(:help,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help,), Tuple{String}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help,), Tuple{String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:help,), Tuple{String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:help,), Tuple{String}}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, UInt64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, UInt64, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{UInt64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), UInt64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Float64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Float64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Array{Int64, 1}, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, DataType}, Base.Pair{Symbol, CRISPRofftargetHunter.var"#264#265"}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type, :required, :range_tester), T} where T<:Tuple}, Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#264#265"}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#264#265"}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#264#265"}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#264#265"}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#264#265"}}}})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{Base.var"##all#698", Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#66#68", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#60#62", Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#61#63", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#60#62"}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Nothing, Bool}}, Int64})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#516", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#517#518"{ArgParse.var"#67#69"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(Base.length), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Int64})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#39", Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#40", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#39"}})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, UInt64, String})
precompile(Tuple{Base.var"#521#522"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Pair{DataType, DataType}}, Any, Any})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Type})
precompile(Tuple{Type{Base.Pair{Symbol, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt64})
precompile(Tuple{typeof(Base.:(!=)), String, String})
precompile(Tuple{Type{NamedTuple{(:seed, :max_iterations, :max_count), T} where T<:Tuple}, Tuple{UInt64, Int64, Int64}})
precompile(Tuple{CRISPRofftargetHunter.var"#build_hashDB##kw", NamedTuple{(:seed, :max_iterations, :max_count), Tuple{UInt64, Int64, Int64}}, typeof(CRISPRofftargetHunter.build_hashDB), String, String, CRISPRofftargetHunter.Motif, String})
precompile(Tuple{Type{CRISPRofftargetHunter.GenomeInfo}, Dates.DateTime, String, UInt32, Array{String, 1}, DataType, DataType, Bool})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Logging.var"##handle_message#2", Any, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.haskey), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{Base.var"##with_output_color#814", Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(FASTX.sequence), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, FASTX.FASTA.Record, Base.UnitRange{Int64}})
precompile(Tuple{typeof(CRISPRofftargetHunter.pushguides!), Array{UInt64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Bool})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#50#51"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#50#51"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#50#51"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#50#51"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#50#51"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Int64}})
precompile(Tuple{ThreadsX.Implementations.var"##map#74", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#57#61"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#57#61"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#57#61"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#57#61"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#57#61"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vararg{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, N} where N})
precompile(Tuple{ThreadsX.Implementations.var"##map#74", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Bool, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Bool, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.sum), Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 21}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioSequences.encoded_data), BioSequences.Mer{BioSequences.DNAAlphabet{2}, 21}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt64, 1}, UInt64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{UInt64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Base.Broadcast.Extruded{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.convert), Type{UInt8}, Int64})
precompile(Tuple{Base.Sort.var"##sort!#8", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{UInt64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt8}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}}}})
precompile(Tuple{Type{Array{UInt8, 1}}})
precompile(Tuple{Base.Colon, Int64, UInt8})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{UInt8, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), CRISPRofftargetHunter.var"#158#159"{Int64}, Array{UInt8, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#158#159"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#158#159"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#158#159"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Int64, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{typeof(Base.push!), Array{UInt8, 1}, UInt8})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sortperm), Array{UInt8, 1}})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{UInt8, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt64, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{UInt64, 1}, Array{UInt8, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{UInt64, 1}, Array{UInt8, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.HashDB{T} where T<:Unsigned}, CRISPRofftargetHunter.DBInfo, Array{FastFilter.BinaryFuseFilter{UInt8}, 1}, Array{UInt8, 1}, Array{FastFilter.BinaryFuseFilter{UInt8}, 1}, Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(CRISPRofftargetHunter.save), CRISPRofftargetHunter.HashDB{UInt8}, String})
precompile(Tuple{typeof(Serialization.serialize_any), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt32})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{String, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Bool})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt64, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{FastFilter.BinaryFuseFilter{UInt8}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Int64, 1}, String})
precompile(Tuple{CRISPRofftargetHunter.var"#264#265", String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{String, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt64, 1}})
precompile(Tuple{Type{Array{FastFilter.BinaryFuseFilter{UInt8}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{FastFilter.BinaryFuseFilter{UInt8}, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{FastFilter.BinaryFuseFilter{UInt8}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{FastFilter.BinaryFuseFilter{UInt8}, 1}, FastFilter.BinaryFuseFilter{UInt8}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.HashDB{UInt8}, Symbol})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.DBInfo, Symbol})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Motif, Symbol})
precompile(Tuple{Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 20}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioSequences.encoded_data), BioSequences.Mer{BioSequences.DNAAlphabet{2}, 20}})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt8})
precompile(Tuple{typeof(Base.iterate), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Printf.format), Printf.Format{Base.CodeUnits{UInt8, String}, Tuple{Printf.Spec{Base.Val{Char(0x64000000)}}}}, Int64})
precompile(Tuple{DataFrames.var"##DataFrame#177", Bool, Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"##make_unique!#5", Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{DataFrames.var"#DataFrame#149#151", Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, DataFrames.Index})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{DataFrames.var"##sort!#750", Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{DataFrames.var"##manipulate#482", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.permute!!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CSV.write), String, DataFrames.DataFrame})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, CSV.var"#60#63", Bool})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, typeof(Base.eltype)}, Int64})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :header), Tuple{Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:D0, :D1, :guide), Tuple{Int64, Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#60#63"}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CSV.var"#73#74"{CSV.var"#66#67"{Bool, Bool, Tables.Schema{(:D0, :D1, :guide), Tuple{Int64, Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#60#63"}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#60#63"}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#60#63"}, UInt8, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{CSV.var"#75#76"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, CSV.var"#60#63"}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol})
precompile(Tuple{Type{CSV.File{threaded} where threaded}, String})
precompile(Tuple{Type{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Mmap.mmap), String, Type{Array{UInt8, 1}}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Mmap.var"#7#8"{Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{Parsers.var"#1#2", Bool}}, Int64})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, ignoreemptylines, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignoreemptylines where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Nothing, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CSV.var"#14#18"{UInt8}}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Base.vcat), Array{Type, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CSV.var"#15#19", Array{Type, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(CSV.nonstandardtype), Base.Iterators.Filter{CSV.var"#15#19", Array{Type, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{CSV.var"#15#19", Array{Type, 1}}, typeof(CSV.nonstandardtype)}})
precompile(Tuple{Type{CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}}, String, Array{Symbol, 1}, Int64, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Array{Int64, 1}, Array{Type, 1}, Array{UInt8, 1}, Array{Int64, 1}, Float64, Type})
precompile(Tuple{Parsers.var"##s31#19", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Parsers.var"##s31#22", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, Parsers.var"#23#24"}, Int64})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{Base.var"#@goto", LineNumberNode, Module, Symbol})
precompile(Tuple{Base.var"#@label", LineNumberNode, Module, Symbol})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Parsers.var"#20#21", Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Parsers.var"#20#21"}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:debug, :typemap), Tuple{Bool, Base.Dict{Type, Type}}}, Type{CSV.File{threaded} where threaded}, CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.allocate), Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Array{CSV.RefPool, 1}})
precompile(Tuple{typeof(CSV.allocate), Core.TypeofBottom, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.MissingVector, Int64})
precompile(Tuple{typeof(CSV.parsefilechunk!), Base.Val{false}, Int64, Base.Dict{Type, Type}, Array{AbstractArray{T, 1} where T, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Array{Int64, 1}, Float64, Array{CSV.RefPool, 1}, Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Bool, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Type{Tuple{}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Type}, Type})
precompile(Tuple{typeof(CSV.allocate), Type, Int64})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Int64, 1, S, V, A} where A<:AbstractArray{Int64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, UInt32})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, String, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}, Int64})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{Int64, 1}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, Array{String, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{Int64, 1}}, Type{Symbol}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Array{T, 1} where T}, Base.Dict{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{T, 1} where T}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{T, 1} where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{AbstractArray{T, 1} where T, 1}, Base.Dict{Symbol, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Array{String, 1}, Symbol})
precompile(Tuple{Type{DataFrames.DataFrame}, CSV.File{false}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{String, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{String, 1}})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{typeof(Base.eltype), Base.BottomRF{typeof(Base.promote_type)}}, Base._InitialValue, DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{Base.BottomRF{typeof(Base.promote_type)}, Type, Type})
precompile(Tuple{Type{Array{Int64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.all), Bool})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.AbstractTestSet})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##printstyled#816", Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{Base.var"##printstyled#816", Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.CoreLogging.var"#@info", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{Core.Compiler.var"#256#258"{DataType, Tuple{String, Int64}}, Int64})
precompile(Tuple{typeof(VariantCallFormat._readheader!), VariantCallFormat.Reader, BioCore.Ragel.State{BufferedStreams.BufferedInputStream{Base.IOStream}}})
precompile(Tuple{typeof(VariantCallFormat._read!), VariantCallFormat.Reader, BioCore.Ragel.State{BufferedStreams.BufferedInputStream{Base.IOStream}}, VariantCallFormat.Record})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.similar), Array{Array{Base.UnitRange{Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.UnitRange{Int64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.close), BufferedStreams.BufferedInputStream{Base.IOStream}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.getindex), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(*)), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#52#54"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#52#54"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#52#54"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#52#54"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#52#54"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#171#174"{Base.UnitRange{Int64}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CRISPRofftargetHunter.var"#171#174"{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Array{String, 1}, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.join), Tuple{Array{Array{String, 1}, 1}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.join), Tuple{Array{Array{String, 1}, 1}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Tuple{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{typeof(Base.copy), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.lastindex), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CRISPRofftargetHunter.var"#53#55"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#56#60"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Vararg{Array{BioSymbols.DNA, 1}, N} where N})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{21, 36}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64, Vararg{Int64, N} where N})
precompile(Tuple{StaticArrays.var"##s155#188", Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#189#190", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#189#190"}})
precompile(Tuple{StaticArrays.var"##s155#62", Any, Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s26#5", Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s26#6", Any, Any, Any, Any, Any, Type, Type, Type, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArrays.var"#7#8", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{21, 36}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{21, 36}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{21, 36}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{21, 36}, T, 2, L} where L where T}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.AmbigIdx}, StaticArrays.SArray{Tuple{21, 36}, BioSymbols.DNA, 2, 756}, Array{String, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}})
precompile(Tuple{typeof(Base.write), Base.IOStream, BioSymbols.DNA})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(21, 36)}, Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{BioSymbols.DNA}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.VcfDB, Symbol})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.trues), Int64})
precompile(Tuple{StaticArrays.var"##s155#225", Any, Any, Any, Any, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"#@_propagate_inbounds_meta", LineNumberNode, Module})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{21, 36}, BioSymbols.DNA, 2, 756}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{BioSymbols.DNA, 1}, BioSymbols.DNA})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(BioSymbols.iscompatible), Tuple{Array{BioSymbols.DNA, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BioSymbols.iscompatible), Tuple{Array{BioSymbols.DNA, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.sum), Base.BitArray{1}})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#177#179"{CRISPRofftargetHunter.VcfDB}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#177#179"{CRISPRofftargetHunter.VcfDB}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#177#179"{CRISPRofftargetHunter.VcfDB}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#177#179"{CRISPRofftargetHunter.VcfDB}}, Int64})
precompile(Tuple{typeof(Base.reduce), Function, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Base.BitArray{1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), Base.Broadcast.BroadcastFunction{typeof(Base.:(|))}, Base.IndexLinear, Array{Base.BitArray{1}, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{ProgressMeter.Progress}, Int64, Int64, String, Nothing, Symbol, Base.TTY})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:r,), Tuple{Int64}}, Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{Type{Array{UInt32, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{4, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{4, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{4, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{4, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{4, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt32, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.save), CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}, String})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{IndexableBitVectors.Block, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Int64, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt32, 1}})
precompile(Tuple{Type{BioSequences.LongSequence{A} where A<:BioSequences.Alphabet}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#18#19"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CRISPRofftargetHunter.var"#18#19"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}, Tuple{Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.GenomeInfo, Symbol})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{Type{Array{IndexableBitVectors.Block, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{IndexableBitVectors.Block, 1}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Int64, 1}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt32, 1}})
precompile(Tuple{Type{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}})
precompile(Tuple{typeof(Base.append!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(BioSequences.reverse_complement), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.iterate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.sort!), Array{UInt32, 1}})
precompile(Tuple{Base.Sort.var"##sort!#8", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.sort!), Array{UInt32, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{UInt32, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Int64, Array{Int64, 1}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.IdDict{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Serialization.deserialize_dict), Serialization.Serializer{Base.IOStream}, Type{Base.IdDict{Int64, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.PAMinFMI, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.reverse), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.reverse), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#248#256"{Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#248#256"{Int64}}})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.getchromseq), Bool, FASTX.FASTA.Record})
precompile(Tuple{typeof(Base.getindex), Base.IdDict{Int64, Array{Int64, 1}}, Any})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#249#257"{CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.pushfirst!), Base.BitArray{1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.falses), Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Int64, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Int64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#250#258"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#250#258"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#251#259"{Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#251#259"{Int64, Int64}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.levenshtein), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(BioSymbols.complement), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BioSymbols.complement), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#252#260"{CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.push!), Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.Sort.searchsortedlast), Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#253#261"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#253#261"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#254#262"{Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#254#262"{Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.zeros), Type{Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.repeat), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.repeat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(PathDistribution.path_enumeration), Int64, Int64, Array{Bool, 2}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Int64, Int64}, Int64})
precompile(Tuple{Type{PathDistribution.PathEnum}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{PathDistribution.PathEnum, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#34#37"{Array{Int64, 1}}, Array{PathDistribution.PathEnum, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{PathDistribution.PathEnum, 1}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CRISPRofftargetHunter.var"#34#37"{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{PathDistribution.PathEnum, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CRISPRofftargetHunter.var"#34#37"{Array{Int64, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CRISPRofftargetHunter.var"#34#37"{Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#35#38"{Array{Int64, 1}}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, CRISPRofftargetHunter.var"#35#38"{Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#36#39"{Int64}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, CRISPRofftargetHunter.var"#36#39"{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Int64, Array{Array{Int64, 1}, 1}}, Any, Any})
precompile(Tuple{typeof(Base.collect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSymbols.DNA, 1}, Array{Int64, 1}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#41#45"}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#42#46"{Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#42#46"{Int64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#42#46"{Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.Path, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{CRISPRofftargetHunter.Path, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.append!), Array{CRISPRofftargetHunter.Path, 1}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#41#45"}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Array{Int64, 1}, 1, Array{Array{Int64, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#41#45"}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#42#46"{Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#42#46"{Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSymbols.DNA, 1}, Vararg{Array{BioSymbols.DNA, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Tuple{Tuple{BioSymbols.DNA, Int64}, Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{ThreadsX.Implementations.var"#89#90"{ThreadsX.Implementations.ParallelMergeSortAlg{Base.Sort.MergeSortAlg, Int64, Int64}, Base.Order.By{CRISPRofftargetHunter.var"#43#47", Base.Order.ForwardOrdering}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{ThreadsX.Implementations.var"#87#88"{Base.Order.By{CRISPRofftargetHunter.var"#43#47", Base.Order.ForwardOrdering}, Int64, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{ThreadsX.Implementations.var"##_map#72", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.Implementations._map), Function, Base.Iterators.Zip{Tuple{Array{CRISPRofftargetHunter.Path, 1}, Array{Int64, 1}}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#44#48"}, Base.Iterators.Zip{Tuple{Array{CRISPRofftargetHunter.Path, 1}, Array{Int64, 1}}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#44#48"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.Iterators.Zip{Tuple{Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#44#48"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#44#48"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.Path, 1}, Base.Iterators.Zip{Tuple{Array{CRISPRofftargetHunter.Path, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Array{CRISPRofftargetHunter.Path, 1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#237#239"{Int64, CRISPRofftargetHunter.MotifPathTemplates}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{CRISPRofftargetHunter.Path, 1}, 1}, Array{CRISPRofftargetHunter.Path, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#237#239"{Int64, CRISPRofftargetHunter.MotifPathTemplates}}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{CRISPRofftargetHunter.Path, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{CRISPRofftargetHunter.Path, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Path, Symbol})
precompile(Tuple{typeof(Base.count), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Path, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Path, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{CRISPRofftargetHunter.Path, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Array{CRISPRofftargetHunter.Path, 1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#242#244"{Int64, CRISPRofftargetHunter.MotifPathTemplates}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{CRISPRofftargetHunter.Path, 1}, 1}, Array{CRISPRofftargetHunter.Path, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#242#244"{Int64, CRISPRofftargetHunter.MotifPathTemplates}}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.count_with_cashe!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#91#93"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#91#93"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.do_linear_chrom), String, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo, Int64, String})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#64#67"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#64#67"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#64#67"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#64#67"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#64#67"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, UInt8, Array{UInt32, 1}, Bool})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned}, Tuple{UInt8, Array{UInt32, 1}, Bool}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned}, Tuple{UInt8, Array{UInt32, 1}, Bool}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#65#68"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#65#68"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#65#68"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#65#68"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#65#68"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{CRISPRofftargetHunter.PrefixDB, 1}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#70#75", Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#70#75"}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#70#75"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.PrefixDB, 1, Array{CRISPRofftargetHunter.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#70#75"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#70#75"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#70#75"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#71#76", Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#71#76"}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#71#76"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.PrefixDB, 1, Array{CRISPRofftargetHunter.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#71#76"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#71#76"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#71#76"}})
precompile(Tuple{typeof(Base.unique), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#72#77"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}})
precompile(Tuple{typeof(Base.isbits), Any})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#72#77"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#72#77"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UnionAll})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#72#77"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#72#77"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Nothing, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Nothing, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Nothing, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#91#93"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#91#93"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, N} where N})
precompile(Tuple{typeof(ThreadsX.map), Function, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#92#94"{String, CRISPRofftargetHunter.DBInfo}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#92#94"{String, CRISPRofftargetHunter.DBInfo}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#92#94"{String, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{UnionAll}})
precompile(Tuple{Type{Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, CRISPRofftargetHunter.Loc{UInt8, UInt32}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.PrefixDB, Symbol})
precompile(Tuple{typeof(Base.append!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.append!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#92#94"{String, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#92#94"{String, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.LinearDB, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.first), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.mapreduce), Function, Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#100#105"{String, String, Int64, CRISPRofftargetHunter.LinearDB}})
precompile(Tuple{Type{NamedTuple{(:init, :basesize), T} where T<:Tuple}, Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}})
precompile(Tuple{Transducers.var"#foldxt##kw", NamedTuple{(:init, :basesize), Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}}, typeof(Transducers.foldxt), typeof(Base.:(+)), Transducers.Map{CRISPRofftargetHunter.var"#100#105"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, InitialValues.InitialValueOf{typeof(Base.:(+))}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#95#97"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#95#97"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Function, Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#96#98", Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#96#98"}})
precompile(Tuple{typeof(Base.all), Array{Bool, 1}})
precompile(Tuple{Type{Array{Base.UnitRange{UInt32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.SuffixDB, Symbol})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.suffix_align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), Base.UnitRange{UInt32}, Symbol})
precompile(Tuple{Base.Colon, UInt32, UInt32})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Symbol})
precompile(Tuple{typeof(Base.string), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.decode), CRISPRofftargetHunter.Loc{UInt8, UInt32}, CRISPRofftargetHunter.DBInfo})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Int64, 2}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#101#106"{String}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#103#108"{Base.IOStream}, String, Vararg{String, N} where N})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Int64, 2}, Symbol})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.resize!), Array{UInt32, 1}, Int64})
precompile(Tuple{Type{Base.Dict{String, UInt32}}, Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{String, UInt32}})
precompile(Tuple{Type{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}, Array{String, 1}, Base.Threads.Atomic{Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{String, 1}}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{String, 1}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{String, 1}}, Type{Symbol}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Array{T, 1} where T}, Base.Dict{Symbol, Array{String, 1}}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{T, 1} where T}, Type{Symbol}, Type{AbstractArray{var"#s831", 1} where var"#s831"}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Dict{Symbol, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{AbstractArray{T, 1} where T, 1}, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#183#188"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#183#188"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#183#188"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#183#188"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.floor), Float64})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{typeof(CRISPRofftargetHunter.all_kmers), Int64})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 3}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}}, Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}, 1}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.length), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{ProgressMeter.ProgressWrapper{T} where T}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, ProgressMeter.Progress})
precompile(Tuple{typeof(Base.iterate), ProgressMeter.ProgressWrapper{Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#184#189"})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#184#189"}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#184#189"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#184#189"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Base.BitArray{1}, 1}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#184#189"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Base.BitArray{1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Base.BitArray{1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{ThreadsX.Implementations.var"##map#74", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, CRISPRofftargetHunter.Loc{UInt8, UInt32}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt8, 1}, Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.isempty), Array{UInt8, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{UInt8, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.reshape), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, CRISPRofftargetHunter.Loc{UInt8, UInt32}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt32, 1}, Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt32, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.isempty), Array{UInt32, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{UInt32, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.reshape), Array{UInt32, 1}, Tuple{Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#187#192"}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#187#192"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#187#192"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#187#192"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Type{Base.BitArray{1}}, Array{Bool, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.MotifPos}, Array{UInt8, 1}, Array{UInt32, 1}, Base.BitArray{1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}, Int64, Base.BitArray{2}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), ProgressMeter.ProgressWrapper{Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Int64})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Vararg{Base.BitArray{1}, N} where N})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#185#190"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt8, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#186#191"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt32, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.SeedDB, Symbol})
precompile(Tuple{typeof(Base.first), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#200#206"{Int64, CRISPRofftargetHunter.SeedDB}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#200#206"{Int64, CRISPRofftargetHunter.SeedDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#200#206"{Int64, CRISPRofftargetHunter.SeedDB}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#200#206"{Int64, CRISPRofftargetHunter.SeedDB}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#200#206"{Int64, CRISPRofftargetHunter.SeedDB}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(ThreadsX.mapreduce), Function, Function, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#201#207"{String, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.SeedDB}})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{Transducers.var"#foldxt##kw", NamedTuple{(:init, :basesize), Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}}, typeof(Transducers.foldxt), typeof(Base.:(+)), Transducers.Map{CRISPRofftargetHunter.var"#201#207"{String, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.SeedDB}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#201#207"{String, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.SeedDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, InitialValues.InitialValueOf{typeof(Base.:(+))}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#193#196"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#193#196"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#194#197", Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#194#197"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#195#198"{Int64}, Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#195#198"{Int64}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.MotifPos, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#201#207"{String, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.SeedDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#201#207"{String, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.SeedDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}})
precompile(Tuple{Type{Array{Any, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 2}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.pushguides!), Array{UInt128, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt128}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt128}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt128}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Base.Sort.var"##sort!#8", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{UInt128, 1}})
precompile(Tuple{typeof(Base.sort!), Array{UInt128, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt128, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Base.IdDict{UInt128, UInt8}}, Base.Iterators.Zip{Tuple{Array{UInt128, 1}, Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{UInt128, UInt8}, Any, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.IdDict{UInt128, UInt8}})
precompile(Tuple{typeof(Serialization.deserialize_dict), Serialization.Serializer{Base.IOStream}, Type{Base.IdDict{UInt128, UInt8}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.DictDB, Symbol})
precompile(Tuple{typeof(Base.get), Base.IdDict{UInt128, UInt8}, Any, Any})
precompile(Tuple{typeof(ThreadsX.collect), Base.Set{String}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{String, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{String, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#9#11"{String, Int64}, Array{String, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#9#11"{String, Int64}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#9#11"{String, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#9#11"{String, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#9#11"{String, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#9#11"{String, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.BitArray{1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}, Array{String, 1}})
precompile(Tuple{typeof(ThreadsX.sum), Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, InitialValues.InitialValueOf{typeof(Base.add_sum)}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.add_sum), InitialValues.InitialValueOf{typeof(Base.add_sum)}, Int64})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, Int64, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, Int64, String})
precompile(Tuple{typeof(Base.add_sum), Int64, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, Int64, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}, Int64})
precompile(Tuple{typeof(Transducers.unreduced), Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}, Array{String, 1}})
precompile(Tuple{typeof(ThreadsX.sum), Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, InitialValues.InitialValueOf{typeof(Base.add_sum)}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, Int64, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, Int64, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}, Int64})
precompile(Tuple{typeof(Transducers.foldxt), typeof(Base.union), Transducers.Map{CRISPRofftargetHunter.var"#8#10"{Array{Char, 1}}}, Base.Set{String}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#8#10"{Array{Char, 1}}}, Transducers.BottomRF{Transducers.Completing{InitialValues.AdjoinIdentity{typeof(Base.union)}}}}, Transducers.InitOf{Transducers.DefaultInitOf{OP} where OP}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{String, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#8#10"{Array{Char, 1}}}, Transducers.BottomRF{Transducers.Completing{InitialValues.AdjoinIdentity{typeof(Base.union)}}}}, Base.Set{String}, Base.Set{String}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#8#10"{Array{Char, 1}}}, Transducers.BottomRF{Transducers.Completing{InitialValues.AdjoinIdentity{typeof(Base.union)}}}}, Base.Set{String}})
precompile(Tuple{typeof(Transducers.unreduced), Base.Set{String}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, Int64, String})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{String, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.add_sum), InitialValues.InitialValueOf{typeof(Base.add_sum)}, UInt8})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, UInt8, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#81#86"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, UInt8, String})
precompile(Tuple{typeof(Base.add_sum), UInt8, Int64})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, UInt8, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}}, UInt8})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, UInt8, Int64})
precompile(Tuple{typeof(Base.add_sum), Int64, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#82#87"{CRISPRofftargetHunter.DictDB}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, Int64, UInt8})
precompile(Tuple{typeof(Base.string), CRISPRofftargetHunter.Motif})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{Base.var"##sprint#385", Nothing, Int64, typeof(Base.sprint), Function, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.values), Base.IdDict{UInt128, UInt8}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.IdDict{UInt128, UInt8}}})
precompile(Tuple{typeof(Base.:(>=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{UInt8, Int64}, Any, Any})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.IdDict{UInt128, UInt8}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{UInt128, UInt8}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{UInt128, UInt8}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{UInt128, UInt8}, Int64, Int64})
precompile(Tuple{typeof(Base.:(>)), UInt8, UInt8})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt128, Int64})
precompile(Tuple{typeof(Base.push!), CRISPRofftargetHunter.BloomFilter, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{UInt128, UInt8}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CRISPRofftargetHunter.BloomFilter, 1}})
precompile(Tuple{typeof(Base.length), Base.IdDict{UInt128, UInt8}})
precompile(Tuple{Base.var"#round##kw", NamedTuple{(:digits,), Tuple{Int64}}, typeof(Base.round), Float64})
precompile(Tuple{Type{Array{CRISPRofftargetHunter.BloomFilter, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.BloomFilter, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CRISPRofftargetHunter.BloomFilter, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CRISPRofftargetHunter.BloomFilter, 1}, CRISPRofftargetHunter.BloomFilter, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.BinDB{UInt8}, Symbol})
precompile(Tuple{typeof(CRISPRofftargetHunter.estimate), CRISPRofftargetHunter.BinDB{UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.sum), Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, InitialValues.InitialValueOf{typeof(Base.add_sum)}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, Int64, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), UInt64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, UInt64, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}}, Int64, UInt64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#153#156"{CRISPRofftargetHunter.BinDB{UInt8}}}, Transducers.Reduction{Transducers.Map{typeof(Base.identity)}, Transducers.BottomRF{Transducers.Completing{typeof(Base.add_sum)}}}}, UInt64})
precompile(Tuple{typeof(Transducers.unreduced), UInt64})
precompile(Tuple{typeof(Base.convert), Type{Int64}, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Bool, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.vcat), Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{21, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{21, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{21, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{21, 2}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{21, 2}, T, 2, L} where L where T}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.AmbigIdx}, StaticArrays.SArray{Tuple{21, 2}, BioSymbols.DNA, 2, 42}, Nothing})
precompile(Tuple{Type{CRISPRofftargetHunter.HashDB{T} where T<:Unsigned}, CRISPRofftargetHunter.DBInfo, Array{FastFilter.BinaryFuseFilter{UInt8}, 1}, Array{UInt8, 1}, Array{FastFilter.BinaryFuseFilter{UInt8}, 1}, Array{UInt8, 1}, CRISPRofftargetHunter.AmbigIdx})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(21, 2)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{21, 2}, BioSymbols.DNA, 2, 42}, Int64, Base.BitArray{1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#161#163"{CRISPRofftargetHunter.HashDB{UInt8}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#161#163"{CRISPRofftargetHunter.HashDB{UInt8}}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#161#163"{CRISPRofftargetHunter.HashDB{UInt8}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#161#163"{CRISPRofftargetHunter.HashDB{UInt8}}}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{Type{Array{Base.BitArray{1}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{Base.BitArray{1}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.NoHashDB, Symbol})
precompile(Tuple{typeof(CRISPRofftargetHunter.findbits), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.sum), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#165#168"{CRISPRofftargetHunter.NoHashDB}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#165#168"{CRISPRofftargetHunter.NoHashDB}}})
precompile(Tuple{Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 19}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioSequences.encoded_data), BioSequences.Mer{BioSequences.DNAAlphabet{2}, 19}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.BitArray{1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#166#169"{CRISPRofftargetHunter.NoHashDB}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#166#169"{CRISPRofftargetHunter.NoHashDB}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#166#169"{CRISPRofftargetHunter.NoHashDB}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#166#169"{CRISPRofftargetHunter.NoHashDB}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#24#26"{Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CSV.var"#24#26"{Int64, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, CSV.var"#24#26"{Int64, Int64}}, Int64})
precompile(Tuple{typeof(CSV.findrowstarts!), Array{UInt8, 1}, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{Int64, 1}, Int64, Array{Type, 1}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.something), Int64, String})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{typeof(CSV.multithreadparse), Array{Type, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Int64, Int64, Float64, Array{CSV.RefPool, 1}, Int64, Base.Dict{Type, Type}, Type, Nothing, Int64, Array{Int64, 1}, Int64, Bool})
precompile(Tuple{CSV.var"#35#38"{Array{Type, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Int64, Float64, Array{CSV.RefPool, 1}, Int64, Base.Dict{Type, Type}, DataType, Int64, Array{Int64, 1}, Int64, Bool, Array{Base.ReentrantLock, 1}, Array{Int64, 1}, Array{Array{AbstractArray{T, 1} where T, 1}, 1}, Int64, Int64}})
precompile(Tuple{typeof(CSV.reallocate!), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(CSV.allocate), Type{CSV.PooledString}, Int64})
precompile(Tuple{typeof(CSV.reallocate!), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{typeof(CSV.allocate), Type{String}, Int64})
precompile(Tuple{typeof(CSV.reallocate!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64})
precompile(Tuple{CSV.var"#36#39"{Array{Type, 1}, Array{UInt8, 1}, Array{UInt8, 1}, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Float64, Array{CSV.RefPool, 1}, Int64, Base.Dict{Type, Type}, DataType, Nothing, Int64, Array{Int64, 1}, Bool, Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Array{Array{AbstractArray{T, 1} where T, 1}, 1}, Int64}})
precompile(Tuple{typeof(Base.parent), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CSV.var"#28#31"{Int64, Array{Array{AbstractArray{T, 1} where T, 1}, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{Array{String, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.convert), Type{Array{UInt32, 1}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CSV.var"#28#31"{Int64, Array{Array{AbstractArray{T, 1} where T, 1}, 1}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{UInt32, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{SentinelArrays.var"#newsentinel!##kw", NamedTuple{(:force,), Tuple{Bool}}, typeof(SentinelArrays.newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, N} where N})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{UInt32, 1}, 1}, Array{UInt32, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#30#33"{Array{UInt32, 1}, Int64, Array{Array{AbstractArray{T, 1} where T, 1}, 1}}}, Int64})
precompile(Tuple{SentinelArrays.var"##newsentinel!#1", Bool, typeof(SentinelArrays.newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, N} where N})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{UInt32, 1}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#30#33"{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Array{Array{AbstractArray{T, 1} where T, 1}, 1}}}, Int64})
precompile(Tuple{typeof(CSV.makeandsetpooled!), Array{AbstractArray{T, 1} where T, 1}, Int64, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}, Array{CSV.RefPool, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#30#33"{SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Int64, Array{Array{AbstractArray{T, 1} where T, 1}, 1}}}, Int64})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{String, 1}, 1}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}}, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, SentinelArrays.ChainedVector{String, Array{String, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}}, Type{Symbol}, Type{AbstractArray{String, 1}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, AbstractArray{String, 1}}, Base.Dict{Symbol, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{String, 1}}, SentinelArrays.ChainedVector{String, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, AbstractArray{String, 1}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, CSV.var"#25#27"}, Tuple{Int64, Int64}})
precompile(Tuple{CSV.var"#25#27", Tuple{Symbol, SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, AbstractArray{String, 1}}, Type{Symbol}, Type{AbstractArray{var"#s831", 1} where var"#s831"}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Dict{Symbol, AbstractArray{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, SentinelArrays.ChainedVector{String, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}, Symbol})
precompile(Tuple{Type{CSV.File{true}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{AbstractArray{T, 1} where T, 1}, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{DataFrames.DataFrame}, CSV.File{true}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.length), SentinelArrays.ChainedVector{String, Array{String, 1}}})
precompile(Tuple{typeof(Base.length), SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.ChainedVector{String, Array{String, 1}}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{String}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{String, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.asguide), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{String, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.asguide), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{String, 1}}}}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.countspaces), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.countspaces), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Main.ldb_start), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 2}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.string), String, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#131#132"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#131#132"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#131#132"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#131#132"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.zeros), Type{UInt32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.zeros), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.ones), Type{UInt32}, Int64})
precompile(Tuple{typeof(Base.isequal), Int64})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{UInt32, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, UInt32})
precompile(Tuple{Type{BangBang.NoBang.SingletonVector{T} where T}, Int64})
precompile(Tuple{typeof(BangBang.NoBang.append), BangBang.NoBang.Empty{Array{T, 1} where T}, BangBang.NoBang.SingletonVector{Int64}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.pop!), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}})
precompile(Tuple{typeof(Base.reshape), Array{Any, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Base.UnitRange{Int64}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#128#130"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#128#130"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#128#130"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.UnitRange{Int64}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#128#130"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Node, 1}, Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#128#130"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.Node, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.reshape), Array{CRISPRofftargetHunter.Node, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#127#129"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{String, UInt32, 1, SentinelArrays.ChainedVector{UInt32, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.TreeDB, Symbol})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.TreeDB}})
precompile(Tuple{Transducers.var"#foldxt##kw", NamedTuple{(:init, :basesize), Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}}, typeof(Transducers.foldxt), typeof(Base.:(+)), Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, InitialValues.InitialValueOf{typeof(Base.:(+))}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#133#134"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#133#134"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{Type{Array{CRISPRofftargetHunter.Node, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CRISPRofftargetHunter.Node, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CRISPRofftargetHunter.Node, 1}, CRISPRofftargetHunter.Node, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.SuffixTreeDB, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Node, 1}, UInt32})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Node, Symbol})
precompile(Tuple{typeof(Base.:(!=)), UInt32, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.push!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(Base.:(>)), Int64, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#137#142"{String}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#139#144"{Base.IOStream}, String, Vararg{String, N} where N})
precompile(Tuple{DataFrames.var"#antijoin##kw", NamedTuple{(:on,), Tuple{Array{Symbol, 1}}}, typeof(DataFrames.antijoin), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames._check_consistency), DataFrames.DataFrame})
precompile(Tuple{DataFrames.var"##manipulate#483", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.allunique), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, DataFrames.var"#35#36"{DataFrames.Index}}})
precompile(Tuple{typeof(Base.any), Function, Array{String, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, Array{Int64, 1}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Base.var"##any#696", Function, typeof(Base.any), Function, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#527#528", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#527#528", Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#527#528", PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.eachcol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataAPI.refarray), Array{String, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{String, 1}, Array{String, 1}, Nothing, Nothing})
precompile(Tuple{typeof(DataAPI.refarray), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{Int64, 1}, Array{Int64, 1}, Nothing, Nothing})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.refpool), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.invrefpool), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{String, 1}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.collect_to!), Array{UInt32, 1}, Base.Generator{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, DataFrames.var"#578#580"{Base.Dict{String, UInt32}}}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.length), Array{UInt32, 1}})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{String, 1}, Array{Int64, 1}, Vararg{AbstractArray{T, 1} where T, N} where N})
precompile(Tuple{Type{DataFrames.OnCol{T, N} where N where T}, Array{String, 1}, Vararg{AbstractArray{T, 1} where T, N} where N})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._all), DataFrames.var"#563#565", Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._all), DataFrames.var"#564#566"{Int64}, Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}}, Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), DataFrames.OnCol{Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.isempty), DataFrames.OnCol{Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.issorted), DataFrames.OnCol{Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.isless), Tuple{String, Int64, UInt32, Int64, UInt32}, Tuple{String, Int64, UInt32, Int64, UInt32}})
precompile(Tuple{typeof(DataFrames._semijoin_unsorted), DataFrames.OnCol{Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{String, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}, Bool})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.hash), Tuple{Array{UInt32, 1}, Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Array{UInt64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.hash), Tuple{Array{UInt32, 1}, Array{UInt64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.hash), Tuple{Array{Int64, 1}, Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Array{UInt64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.hash), Tuple{Array{Int64, 1}, Array{UInt64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.hash), Tuple{Array{String, 1}, Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Array{UInt64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.hash), Tuple{Array{String, 1}, Array{UInt64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Tuple{String, Int64, UInt32, Int64, UInt32}, Tuple{String, Int64, UInt32, Int64, UInt32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#110#112"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#110#112"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#110#112"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#110#112"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{typeof(CRISPRofftargetHunter.isambig), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#111#113", Array{Base.UnitRange{UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{Base.UnitRange{UInt32}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat)})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{Any, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#20#23"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#20#23"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Base.UnitRange{Int64}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#20#23"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.UnitRange{Int64}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#20#23"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#20#23"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{Int64, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), CRISPRofftargetHunter.var"#21#24"{Int64}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#21#24"{Int64}, Array{Int64, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#21#24"{Int64}, Array{Int64, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#21#24"{Int64}, Array{Int64, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#21#24"{Int64}, Array{Int64, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#22#25"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#22#25"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#22#25"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.argmax), Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{UInt32}, Base.UnitRange{UInt32}, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#21#24"{Int64}, Array{Int64, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#163#164"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#22#25"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#22#25"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{UInt32}, Base.UnitRange{UInt32}, Base.UnitRange{UInt32}, Vararg{Base.UnitRange{UInt32}, N} where N})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{UInt32}, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{typeof(CRISPRofftargetHunter.isambig), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{typeof(CRISPRofftargetHunter.isambig), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{typeof(CRISPRofftargetHunter.isambig), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{typeof(CRISPRofftargetHunter.isambig), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.CompactDB, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#114#116"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#114#116"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#115#117", Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#115#117"}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.CSuffixDB, Symbol})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(CRISPRofftargetHunter.suffix_align!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{UInt8, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(CRISPRofftargetHunter.write_detail), Base.IOStream, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, String, String, Int64})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Base.vect), CRISPRofftargetHunter.Loc{UInt8, UInt32}})
precompile(Tuple{typeof(CRISPRofftargetHunter.write_detail), Base.IOStream, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}, CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, String, String, Int64})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#119#123"{String}, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##open#317", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#121#125"{Base.IOStream}, String, Vararg{String, N} where N})
precompile(Tuple{DataFrames.var"##sort!#750", Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.UserColOrdering{Symbol}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.pairs), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(DataFrames._getcol), DataFrames.UserColOrdering{Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Symbol})
precompile(Tuple{typeof(DataFrames.ordering), Symbol, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(DataFrames._getcol), Symbol})
precompile(Tuple{typeof(Base.length), Array{Bool, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Bool, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Bool, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Array{Base.Order.Ordering, 1}, Tuple{Array{Bool, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Bool, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Array{Base.Order.Ordering, 1}, Tuple{Array{Bool, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Bool, Bool})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.permute!!), Array{Bool, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.shrink_and_expand!), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.BitArray{1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.BitArray{1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.BitArray{1}, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{UInt32}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{UInt32}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.is_in_range), Array{UInt32, 1}, Base.BitArray{1}, Array{Int64, 1}, Bool, Bool, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Int64})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{BioSequences.var"#@dna_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(BioSequences.remove_newlines), String})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, String})
precompile(Tuple{Base.var"#@show", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(CRISPRofftargetHunter.isinclusive), BioSymbols.DNA, BioSymbols.DNA})
precompile(Tuple{typeof(CRISPRofftargetHunter.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(CRISPRofftargetHunter.isinclusive)})
precompile(Tuple{typeof(CRISPRofftargetHunter.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(BioSymbols.iscompatible)})
precompile(Tuple{typeof(CRISPRofftargetHunter.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Function})
precompile(Tuple{typeof(Base.count), Function, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioSequences.count_naive), Base.var"#76#77"{typeof(CRISPRofftargetHunter.isinclusive)}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.levenshtein), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, typeof(CRISPRofftargetHunter.isinclusive)})
precompile(Tuple{typeof(CRISPRofftargetHunter.pa_sa), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Aln, Symbol})
precompile(Tuple{typeof(Base.rand), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.getseq), Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(BioSequences.count_naive), Base.var"#76#77"{typeof(Base.isequal)}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.getseq)})
precompile(Tuple{typeof(CRISPRofftargetHunter.prefix_align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.suffix_align!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.:(==)), CRISPRofftargetHunter.Aln, CRISPRofftargetHunter.Aln})
precompile(Tuple{typeof(Base.:(!=)), CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{Main.var"#mutate_suffix!#1", BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), CRISPRofftargetHunter.Aln, CRISPRofftargetHunter.Aln})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{Base.Enums.var"#@enum", LineNumberNode, Module, Union{Expr, Symbol}, Vararg{Any, N} where N})
precompile(Tuple{Core.var"#@__doc__", LineNumberNode, Module, Any})
precompile(Tuple{Type{Main.Nuc}, Int32})
precompile(Tuple{typeof(Base.vect), UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{1, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{1, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{2, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{2, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{Base.Colon, UInt8, UInt8})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{24}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{UInt8}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt32, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Main.Nuc, Vararg{Main.Nuc, N} where N})
precompile(Tuple{Type{Main.DNASeq}, Array{Main.Nuc, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Main.DNASeq, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Main.DNASeq, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{8}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{16}})
precompile(Tuple{Type{Array{UInt16, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt16, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt16, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt16, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{10}})
precompile(Tuple{Type{NamedTuple{(:mmap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:mmap,), Tuple{Bool}}, Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Mmap.mmap), Type{Array{UInt16, 1}}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging._invoked_shouldlog), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Array{UInt8, 1}}, String})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{7, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{7, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{2, UInt8}})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.count), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, String, Int64})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt16, 1}})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, String, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.count), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locate), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(Base.:(|>)), CRISPRofftargetHunter.FMIndexes.LocationIterator{7, UInt8}, typeof(Base.collect)})
precompile(Tuple{typeof(Base.:(|>)), Array{Any, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(Base.:(|>)), Array{Int64, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.isempty), CRISPRofftargetHunter.FMIndexes.LocationIterator{7, UInt8}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{2, UInt16}})
precompile(Tuple{Main.var"#linear_search#2", Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Combinatorics.permutations), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.iterate), Combinatorics.Permutations{Array{UInt8, 1}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{2, UInt8}})
precompile(Tuple{typeof(Base.iterate), Combinatorics.Permutations{Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.read), String})
precompile(Tuple{typeof(Base.copy), Array{UInt8, 1}})
precompile(Tuple{Type{NamedTuple{(:r,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:r,), Tuple{Int64}}, Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, String})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Base.CodeUnits{UInt8, String}, Array{UInt16, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt16, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.count), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{Main.var"#linear_search_#3", String, String})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{Type{CRISPRofftargetHunter.Motif}, String})
precompile(Tuple{typeof(CRISPRofftargetHunter.build_motifTemplates), CRISPRofftargetHunter.Motif})
precompile(Tuple{Type{NamedTuple{(:dist,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{CRISPRofftargetHunter.var"#templates_to_sequences##kw", NamedTuple{(:dist,), Tuple{Int64}}, typeof(CRISPRofftargetHunter.templates_to_sequences), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.MotifPathTemplates})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.comb_of_d1_extended_ref), String})
precompile(Tuple{typeof(Base.collect), Base.Set{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#4#8"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Main.var"#4#8"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{typeof(Base.map), Function, Array{CRISPRofftargetHunter.Aln, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#6#11"{Main.var"#remove_gap#9"}, Array{CRISPRofftargetHunter.Aln, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.Aln, 1}, Base.Generator{Array{CRISPRofftargetHunter.Aln, 1}, Main.var"#6#11"{Main.var"#remove_gap#9"}}})
precompile(Tuple{typeof(Base.map), Function, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#7#12", Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.Path, 1}, Base.Generator{Array{CRISPRofftargetHunter.Path, 1}, Main.var"#7#12"}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.Filesystem.mktemp)})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.IOStream}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.IOStream}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vararg{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, N} where N})
precompile(Tuple{Type{Main.TestSeq}, Bool, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.save), Main.TestSeq, String})
precompile(Tuple{typeof(Base.getproperty), Main.TestSeq, Symbol})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.:(==)), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.combinestrings), String, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.EachStringIndex{String}, CRISPRofftargetHunter.var"#29#30"{String, String, typeof(CRISPRofftargetHunter.notX)}}})
precompile(Tuple{CRISPRofftargetHunter.var"#29#30"{String, String, typeof(CRISPRofftargetHunter.notX)}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.DBInfo}, String, String, CRISPRofftargetHunter.Motif})
precompile(Tuple{Type{CRISPRofftargetHunter.Loc{UInt8, UInt32}}, Int64, Int64, Bool})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4, 4}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{4, 4}, T, 2, L} where L where T}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.AmbigIdx}, StaticArrays.SArray{Tuple{4, 4}, BioSymbols.DNA, 2, 16}, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(4, 4)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{4, 4}, BioSymbols.DNA, 2, 16}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.AmbigIdx, Symbol})
precompile(Tuple{Core.var"#@int128_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.parse), Type{Int128}, String})
precompile(Tuple{Test.var"#@test_throws", LineNumberNode, Module, Any, Any})
precompile(Tuple{Type{UInt16}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.safeadd), UInt16, UInt16})
precompile(Tuple{typeof(Base.:(==)), UInt16, UInt16})
precompile(Tuple{typeof(Base.:(-)), UInt16, UInt16})
precompile(Tuple{typeof(CRISPRofftargetHunter.smallestutype), UInt64})
precompile(Tuple{Type{Unsigned}, Int128})
precompile(Tuple{typeof(CRISPRofftargetHunter.smallestutype), UInt128})
precompile(Tuple{typeof(CRISPRofftargetHunter.base_to_idx), Char})
precompile(Tuple{Type{Test.Threw}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{typeof(CRISPRofftargetHunter.getseq), Int64, Array{Char, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.extension), String})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{typeof(CRISPRofftargetHunter.minkmersize), Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{6}})
precompile(Tuple{typeof(Base.repeat), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Combinatorics.multiset_permutations), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.join), Combinatorics.MultiSetPermutations{Array{Char, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Combinatorics.MultiSetPermutations{Array{Char, 1}}, typeof(Base.join)}})
precompile(Tuple{typeof(Base.rand), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#13#14"{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, Main.var"#13#14"{String}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.comb_of_d), String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.Set{String}, Base.Set{String}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.locate_telomeres), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.isempty), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ambig_max,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Base.var"#findall##kw", NamedTuple{(:ambig_max,), Tuple{Int64}}, typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.length), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt128})
precompile(Tuple{typeof(Base.vect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 1}}, Tuple{Array{Tuple{BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 1}}, Tuple{Array{Tuple{BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 1}, 1}})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 2}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 3}, 1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 4}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 4}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 4}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 4}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 4}, 1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 5}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 5}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 5}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 5}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 5}, 1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 6}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 6}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 6}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 6}, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 6}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.as_kmers), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Base.push!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.setdiff), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.isempty), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.Mer{BioSequences.DNAAlphabet{2}, 2}, 1}}}})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{w, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned where w}, Array{UInt8, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{8, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{8, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.freq), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{w, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned where w}, Array{UInt64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt64, 1}})
precompile(Tuple{Type{IntArrays.IntArray{64, T, 1} where T}, Array{UInt64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{64, UInt64, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Base.length), Array{UInt64, 1}})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt64, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt64, 1}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#15#21"{UInt64}, Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt64, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt64, Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#16#22"{UInt8}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}, UInt8})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt8, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{UInt32}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt32, 1}})
precompile(Tuple{Type{IntArrays.IntArray{17, T, 1} where T}, Array{UInt32, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{17, UInt32, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt32, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#17#23"{UInt32}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}, UInt32})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt32, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt32, Array{UInt32, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:destructive,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:destructive,), Tuple{Bool}}, Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.rand), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base._simple_count), Main.var"#18#24"{UInt8}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base._simple_count), Main.var"#19#25"{UInt8}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#20#26"{UInt8}, Array{UInt8, 1}, Int64})
