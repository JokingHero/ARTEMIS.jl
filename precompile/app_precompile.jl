precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.TTY, Base.TTY}})
precompile(Tuple{Base.var"#pipeline##kw", NamedTuple{(:stderr, :stdout), Tuple{Base.TTY, Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(FilePathsBase.__init__)})
precompile(Tuple{typeof(CSV.__init__)})
precompile(Tuple{Type{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{Base.Dict{_A, _B}} where _B where _A, Int64}}})
precompile(Tuple{Type{CSV.Context}, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Cmd, Base.CodeUnits{UInt8, String}, AbstractString, Array{UInt8, 1}, IO, FilePathsBase.AbstractPath, Base.SubArray{UInt8, 1, Array{UInt8, 1}, I, L} where L where I}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Array{String, 1}, Array{Symbol, 1}, Integer, AbstractArray{var"#s99", 1} where var"#s99"<:Integer}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Integer}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Char, UInt8}}, Char})
precompile(Tuple{typeof(Base.convert), Type{Union{Char, UInt8}}, UInt8})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{K, V} where V where K}, Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, Real, Tuple, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Type}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getsource), Any, Bool})
precompile(Tuple{typeof(CSV.getbytebuffer), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Any, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int64})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Int64, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Any, Bool, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, UInt8})
precompile(Tuple{Type{Parsers.Options}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Nothing, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Any, Bool})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options})
precompile(Tuple{typeof(Parsers.xparse), Type{String}, Array{UInt8, 1}, Int64, Int64, Parsers.Options, Type{Parsers.PosLen}})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Parsers.PosLen, Int16, Parsers.Options, Int64})
precompile(Tuple{typeof(Parsers.checkcmtemptylines), Array{UInt8, 1}, Int64, Int64, Parsers.Options})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#10#13"{Bool}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CSV.var"#10#13"{Bool}}})
precompile(Tuple{typeof(CSV.makeunique), Array{Symbol, 1}})
precompile(Tuple{Type{CSV.Column}, Type, Parsers.Options})
precompile(Tuple{typeof(Base.values), Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(CSV.getpool), Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getname), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.Dict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Setfield.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(BangBang.NoBang.__init__)})
precompile(Tuple{typeof(BangBang.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{Setfield.var"#14#17"})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{Setfield.var"#15#18"})
precompile(Tuple{Setfield.var"#16#19"})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{BangBang.NoBang.var"#6#9"})
precompile(Tuple{BangBang.NoBang.var"#7#10"})
precompile(Tuple{BangBang.NoBang.var"#8#11"})
precompile(Tuple{typeof(BangBang.NoBang.include), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Symbol}})
precompile(Tuple{BangBang.var"#23#35"})
precompile(Tuple{BangBang.var"#24#36"})
precompile(Tuple{BangBang.var"#25#37"})
precompile(Tuple{typeof(BangBang.include), String})
precompile(Tuple{typeof(Transducers.__init__)})
precompile(Tuple{Transducers.var"#287#302"})
precompile(Tuple{Transducers.var"#288#303"})
precompile(Tuple{Transducers.var"#289#304"})
precompile(Tuple{typeof(Transducers.include), String})
precompile(Tuple{Base.var"#@inline", LineNumberNode, Module, Any})
precompile(Tuple{BangBang.var"#32#44"})
precompile(Tuple{BangBang.var"#33#45"})
precompile(Tuple{BangBang.var"#34#46"})
precompile(Tuple{Transducers.var"#284#299"})
precompile(Tuple{Transducers.var"#285#300"})
precompile(Tuple{Transducers.var"#286#301"})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.pkgdir), Module})
precompile(Tuple{Test.var"#@testset", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{Test.var"#@test", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.filter), Function, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, AbstractString})
precompile(Tuple{Type{String}, String})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copy), Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.seed!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Base.Filesystem.tempname)})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{typeof(Base.readlines), String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Base.Set{String}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{String, 1}}}})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Integer, Int64}}})
precompile(Tuple{Transducers.AutoObjectsReStacker.var"##s1#1", Any, Any})
precompile(Tuple{typeof(Base.parentmodule), DataType})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T1} where T1<:(Transducers.Reduction{Union{}, I} where I), Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{StaticArrays.SArray{Tuple{_A, _B}, T, 2, L} where L where T} where _B where _A, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{StaticArrays.SArray{Tuple{_A, _B}, T, 2, L} where L} where _B where _A where T, Int64}}})
precompile(Tuple{StaticArrays.var"##s26#2", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{1}})
precompile(Tuple{Base.var"#@_inline_meta", LineNumberNode, Module})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T} where T<:(StaticArrays.SArray{Tuple{S1, S2}, T, 2, L} where L where T where S2 where S1), Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{SA} where SA<:(StaticArrays.StaticArray{S, T, 1} where T) where S<:Tuple, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T} where T<:(StaticArrays.StaticArray{S, T, 1} where S<:Tuple where T), Int64}}})
precompile(Tuple{ConstructionBase.var"##s26#3", Any, Any})
precompile(Tuple{typeof(Base.map), ConstructionBase.var"#4#5", Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getindex), Type{Symbol}, Symbol, Symbol, Symbol})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(CRISPRofftargetHunter.main), Array{String, 1}})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, ArgParse.ArgParseSettings, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Function})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Bool}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type, :required), T} where T<:Tuple}, Tuple{String, DataType, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{Type{NamedTuple{(:help,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help,), Tuple{String}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help,), Tuple{String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:help,), Tuple{String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:help,), Tuple{String}}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Int64}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Int64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Pair{Symbol, Any}}, Symbol, Type{String}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, UInt64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, UInt64, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{UInt64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), UInt64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, CRISPRofftargetHunter.var"#252#254"}, Pair{Symbol, String}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type, :range_tester), T} where T<:Tuple}, Tuple{String, String, DataType, CRISPRofftargetHunter.var"#252#254"}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CRISPRofftargetHunter.var"#252#254"}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CRISPRofftargetHunter.var"#252#254"}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CRISPRofftargetHunter.var"#252#254"}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CRISPRofftargetHunter.var"#252#254"}}}})
precompile(Tuple{CRISPRofftargetHunter.var"#252#254", String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Float64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Float64, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Float64, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Float64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{Array{Int64, 1}, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Array{Int64, 1}, String, DataType}}}})
precompile(Tuple{typeof(Base.deepcopy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Int64}, Pair{Symbol, Bool}}, Int64})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type, :required), T} where T<:Tuple}, Tuple{Int64, String, DataType, Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, CRISPRofftargetHunter.var"#253#255"}, Pair{Symbol, Bool}}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type, :required, :range_tester), T} where T<:Tuple}, Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#253#255"}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#253#255"}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#253#255"}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#253#255"}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required, :range_tester), Tuple{String, DataType, Bool, CRISPRofftargetHunter.var"#253#255"}}}})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{Base.var"##all#751", Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#68#70", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#62#64", Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#62#64"}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#559", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#560#561"{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(Base.length), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Int64})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#40", Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#40"}})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.isequal), Char})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, UInt64, String})
precompile(Tuple{Base.var"#564#565"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.string), String, String, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Type, Type})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.:(==)), Type, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt64})
precompile(Tuple{Type{NamedTuple{(:seed, :max_iterations, :max_count, :precision), T} where T<:Tuple}, Tuple{UInt64, Int64, Int64, DataType}})
precompile(Tuple{CRISPRofftargetHunter.var"#build_hashDB##kw", NamedTuple{(:seed, :max_iterations, :max_count, :precision), Tuple{UInt64, Int64, Int64, DataType}}, typeof(CRISPRofftargetHunter.build_hashDB), String, String, CRISPRofftargetHunter.Motif, String})
precompile(Tuple{Type{CRISPRofftargetHunter.GenomeInfo}, Dates.DateTime, String, UInt32, Array{String, 1}, DataType, DataType, Bool})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden), Tuple{Bool, Bool, Bool, Bool, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.repeat), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.repeat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(PathDistribution.path_enumeration), Int64, Int64, Array{Bool, 2}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.findall), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, PathDistribution.var"#3#4"{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, PathDistribution.var"#3#4"{Int64}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{Type{PathDistribution.PathEnum}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{PathDistribution.PathEnum, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#37#40"{Array{Int64, 1}}, Array{PathDistribution.PathEnum, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{PathDistribution.PathEnum, 1}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CRISPRofftargetHunter.var"#37#40"{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{PathDistribution.PathEnum, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CRISPRofftargetHunter.var"#37#40"{Array{Int64, 1}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CRISPRofftargetHunter.var"#37#40"{Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#38#41"{Array{Int64, 1}}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, CRISPRofftargetHunter.var"#38#41"{Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#39#42"{Int64}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, CRISPRofftargetHunter.var"#39#42"{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Int64, Array{Array{Int64, 1}, 1}}, Any, Any})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#55#56"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#55#56"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#55#56"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#55#56"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#55#56"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Int64}})
precompile(Tuple{ThreadsX.Implementations.var"##map#74", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#62#66"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#62#66"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#62#66"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#62#66"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#62#66"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{ThreadsX.Implementations.var"##map#74", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{typeof(CRISPRofftargetHunter.isambig)}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Bool, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Bool, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.sum), Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.convert), Type{UInt8}, Int64})
precompile(Tuple{Base.Sort.var"##sort!#8", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{UInt64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt8}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}}}})
precompile(Tuple{Type{Array{FastFilter.BinaryFuseFilter{UInt16}, 1}}})
precompile(Tuple{Type{Array{UInt8, 1}}})
precompile(Tuple{Base.Colon, Int64, UInt8})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{UInt8, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), CRISPRofftargetHunter.var"#184#185"{Int64}, Array{UInt8, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#184#185"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#184#185"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CRISPRofftargetHunter.var"#184#185"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Int64, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{typeof(Base.push!), Array{UInt8, 1}, UInt8})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Array{Int64, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:seed, :max_iterations), Tuple{UInt64, Int64}}, Type{FastFilter.BinaryFuseFilter{UInt16}}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.push!), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, FastFilter.BinaryFuseFilter{UInt16}})
precompile(Tuple{typeof(Base.sortperm), Array{UInt8, 1}})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{UInt8, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt64, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{UInt64, 1}, Array{UInt8, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.get_count_idx), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, UInt64, Bool})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{UInt64, 1}, Array{UInt8, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Type{CRISPRofftargetHunter.HashDB{T, K} where K<:Union{UInt16, UInt32, UInt8} where T<:Unsigned}, CRISPRofftargetHunter.DBInfo, CRISPRofftargetHunter.MotifPathTemplates, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(CRISPRofftargetHunter.save), CRISPRofftargetHunter.HashDB{UInt8, UInt16}, String})
precompile(Tuple{typeof(Serialization.serialize_any), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Any})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt32})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{String, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Bool})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt64, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.IdDict{Int64, Array{Array{Int64, 1}, 1}}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt16, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), String, String, String, String, Vararg{String}})
precompile(Tuple{Base.var"#round##kw", NamedTuple{(:digits,), Tuple{Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Int64, 1}, String})
precompile(Tuple{CRISPRofftargetHunter.var"#253#255", String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{String, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt64, 1}})
precompile(Tuple{typeof(Serialization.deserialize_dict), Serialization.Serializer{Base.IOStream}, Type{Base.IdDict{Int64, Array{Array{Int64, 1}, 1}}}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{Array{Int64, 1}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Array{FastFilter.BinaryFuseFilter{UInt16}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{Type{Array{UInt16, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt16, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, FastFilter.BinaryFuseFilter{UInt16}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.HashDB{UInt8, UInt16}, Symbol})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.DBInfo, Symbol})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Motif, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!=)), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(!=)), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.any), Bool})
precompile(Tuple{typeof(Base.collect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSymbols.DNA, 1}, Array{Int64, 1}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#13#14"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CRISPRofftargetHunter.var"#13#14"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#44#49"}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#45#50"{Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#45#50"{Int64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#45#50"{Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.Path, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{CRISPRofftargetHunter.Path, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.append!), Array{CRISPRofftargetHunter.Path, 1}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#44#49"}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Array{Int64, 1}, 1, Array{Array{Int64, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSymbols.DNA, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}, Tuple{Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#44#49"}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#45#50"{Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#45#50"{Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{ThreadsX.Implementations.var"#95#96"{ThreadsX.Implementations.ParallelMergeSortAlg{Base.Sort.MergeSortAlg, Int64, Int64}, Base.Order.By{CRISPRofftargetHunter.var"#46#51", Base.Order.ForwardOrdering}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{ThreadsX.Implementations.var"#93#94"{Base.Order.By{CRISPRofftargetHunter.var"#46#51", Base.Order.ForwardOrdering}, Int64, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Path, 1}, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Path, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#187#191"{Int64}, typeof(Base.vcat), Base.IndexLinear, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSymbols.DNA, 1}, Vararg{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Tuple{Tuple{BioSymbols.DNA, Int64}, Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{typeof(Base.setdiff), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.collect), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.iterate), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt8})
precompile(Tuple{DataFrames.var"##DataFrame#188", Bool, Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{Symbol, 1}})
precompile(Tuple{DataFrames.var"##make_unique!#1", Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{DataFrames.var"#DataFrame#154#156", Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, DataFrames.Index})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{Int64, 1}})
precompile(Tuple{typeof(DataAPI.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{DataFrames.var"##manipulate#505", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.permute!!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CSV.write), String, DataFrames.DataFrame})
precompile(Tuple{typeof(CSV.checkvaliddelim), Char})
precompile(Tuple{Type{CSV.Options{D, N, DF, M, TF} where TF where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Bool, Tuple{}, typeof(CSV._identity), Bool})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, DataFrames.var"#790#791"}, Int64})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{CSV.var"#write##kw", NamedTuple{(:append, :compress, :header), Tuple{Bool, Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:D0, :D1, :guide), Tuple{Int64, Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{typeof(CSV.with), CSV.var"#99#100"{Bool, Bool, Tables.Schema{(:D0, :D1, :guide), Tuple{Int64, Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol}}, Any, Bool, Bool})
precompile(Tuple{CSV.var"#99#100"{Bool, Bool, Tables.Schema{(:D0, :D1, :guide), Tuple{Int64, Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{CSV.var"#106#107"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{CSV.var"#106#107"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol})
precompile(Tuple{SIMD.Intrinsics.var"##s7#114", Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, TypeVar})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{SIMD.Intrinsics.var"##s7#115", Any, Any, Any, Any, Any, Any})
precompile(Tuple{SIMD.Intrinsics.var"##s7#116", Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{CSV.File}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Cmd, Base.CodeUnits{UInt8, String}, AbstractString, Array{UInt8, 1}, IO, FilePathsBase.AbstractPath, Base.SubArray{UInt8, 1, Array{UInt8, 1}, I, L} where L where I}}, String})
precompile(Tuple{typeof(CSV.getbytebuffer), String, Bool})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), Mmap.var"#7#8"{Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String}})
precompile(Tuple{typeof(CSV.getname), String})
precompile(Tuple{typeof(CSV.parsefilechunk!), CSV.Context, Int64, Int64, Int64, Int64, Array{CSV.Column, 1}, Type{Tuple{}}})
precompile(Tuple{typeof(Parsers.xparse), Type{Int64}, Array{UInt8, 1}, Int64, Int64, Parsers.Options, Type{Int64}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Type}, Type})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Int64, 1, S, V, A} where A<:AbstractArray{Int64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, Array{UInt8, 1}, Int64, Int64, Parsers.Options, Type{Float64}})
precompile(Tuple{typeof(Parsers.xparse), Type{Bool}, Array{UInt8, 1}, Int64, Int64, Parsers.Options, Type{Bool}})
precompile(Tuple{Type{InlineStrings.String31}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String31, 1, S, V, A} where A<:AbstractArray{InlineStrings.String31, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{InlineStrings.String31}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{InlineStrings.String31, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, InlineStrings.String31, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, Int64})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, Array{Int64, 1}})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String31}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(CSV.finaltype), Type})
precompile(Tuple{Type{DataFrames.DataFrame}, CSV.File})
precompile(Tuple{typeof(Base.length), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{InlineStrings.String31, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{InlineStrings.String31, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{InlineStrings.String31, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{InlineStrings.String31, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{InlineStrings.String31, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{DataFrames.var"#118#119", Base.BottomRF{typeof(Base.promote_type)}}, Type, DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{Base.BottomRF{typeof(Base.promote_type)}, Type, Type})
precompile(Tuple{Type{Array{Int64, 2}}, DataFrames.DataFrame})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.all), Bool})
precompile(Tuple{typeof(Base.copy!), Random.TaskLocalRNG, Random.Xoshiro})
precompile(Tuple{typeof(Random.set_global_seed!), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.printstyled), String, String, Vararg{String}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{Base.var"##printstyled#869", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{Base.CoreLogging.var"#@info", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(VariantCallFormat._readheader!), VariantCallFormat.Reader, BioCore.Ragel.State{BufferedStreams.BufferedInputStream{Base.IOStream}}})
precompile(Tuple{typeof(VariantCallFormat._read!), VariantCallFormat.Reader, BioCore.Ragel.State{BufferedStreams.BufferedInputStream{Base.IOStream}}, VariantCallFormat.Record})
precompile(Tuple{typeof(Base.similar), Array{Array{Base.UnitRange{Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.UnitRange{Int64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.close), BufferedStreams.BufferedInputStream{Base.IOStream}})
precompile(Tuple{typeof(Base.findall), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Base.Fix2{typeof(Base.isequal), String}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Fix2{typeof(Base.isequal), String}, Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.:(*)), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#57#59"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#57#59"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.removepam), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#57#59"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#57#59"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#57#59"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#195#198"{Base.UnitRange{Int64}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CRISPRofftargetHunter.var"#195#198"{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Array{String, 1}, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.join), Tuple{Array{Array{String, 1}, 1}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.join), Tuple{Array{Array{String, 1}, 1}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Tuple{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{typeof(Base.:(*)), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CRISPRofftargetHunter.var"#58#60"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#61#65"{CRISPRofftargetHunter.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Vararg{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{21, 36}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64, Vararg{Int64}})
precompile(Tuple{StaticArrays.var"##s45#188", Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StaticArrays.var"#189#190", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, StaticArrays.var"#189#190"}})
precompile(Tuple{StaticArrays.var"##s45#62", Any, Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s26#5", Any, Any, Any})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{StaticArrays.var"##s26#6", Any, Any, Any, Any, Any, Type, Type, Type, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArrays.var"#7#8", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{21, 36}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{21, 36}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{21, 36}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{21, 36}, T, 2, L} where L where T}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.AmbigIdx}, StaticArrays.SArray{Tuple{21, 36}, BioSymbols.DNA, 2, 756}, Array{String, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}})
precompile(Tuple{typeof(Base.write), Base.IOStream, BioSymbols.DNA})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(21, 36)}, Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{BioSymbols.DNA}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.VcfDB, Symbol})
precompile(Tuple{typeof(Base.trues), Int64})
precompile(Tuple{StaticArrays.var"##s45#225", Any, Any, Any, Any, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"#@_propagate_inbounds_meta", LineNumberNode, Module})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{21, 36}, BioSymbols.DNA, 2, 756}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{BioSymbols.DNA, 1}, BioSymbols.DNA})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(BioSymbols.iscompatible), Tuple{Array{BioSymbols.DNA, 1}, Tuple{BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BioSymbols.iscompatible), Tuple{Array{BioSymbols.DNA, 1}, Tuple{BioSymbols.DNA}}}})
precompile(Tuple{typeof(Base.setindex!), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.sum), Base.BitArray{1}})
precompile(Tuple{Base.var"##sprint#426", Nothing, Int64, typeof(Base.sprint), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#201#203"{CRISPRofftargetHunter.VcfDB}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#201#203"{CRISPRofftargetHunter.VcfDB}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#201#203"{CRISPRofftargetHunter.VcfDB}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#201#203"{CRISPRofftargetHunter.VcfDB}}, Int64})
precompile(Tuple{typeof(Base.reduce), Function, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Base.BitArray{1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), Base.Broadcast.BroadcastFunction{typeof(Base.:(|))}, Base.IndexLinear, Array{Base.BitArray{1}, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{ProgressMeter.Progress}, Int64, Int64, String, Nothing, Symbol, Base.TTY})
precompile(Tuple{Type{Array{UInt32, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{4, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{4, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{4, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{4, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{4, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt32, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.save), CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}, String})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{IndexableBitVectors.Block, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt32, 1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.GenomeInfo, Symbol})
precompile(Tuple{Type{Array{IndexableBitVectors.Block, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{IndexableBitVectors.Block, 1}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt32, 1}})
precompile(Tuple{Type{Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}})
precompile(Tuple{typeof(Base.append!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.sort!), Array{UInt32, 1}})
precompile(Tuple{Base.Sort.var"##sort!#8", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sort!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.sort!), Array{UInt32, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{UInt32, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{UInt32, 1}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Int64, Array{Int64, 1}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.IdDict{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Serialization.deserialize_dict), Serialization.Serializer{Base.IOStream}, Type{Base.IdDict{Int64, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.PAMinFMI, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.reverse), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.reverse), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#236#244"{Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#236#244"{Int64}}})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.getchromseq), Bool, FASTX.FASTA.Record})
precompile(Tuple{typeof(Base.getindex), Base.IdDict{Int64, Array{Int64, 1}}, Any})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#237#245"{CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.pushfirst!), Base.BitArray{1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.falses), Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Int64, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Int64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#238#246"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#238#246"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#239#247"{Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#239#247"{Int64, Int64}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.levenshtein), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(BioSymbols.complement), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BioSymbols.complement), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#240#248"{CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.push!), Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.Sort.searchsortedlast), Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#241#249"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#241#249"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#242#250"{Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#242#250"{Int64, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{ThreadsX.Implementations.var"#95#96"{ThreadsX.Implementations.ParallelMergeSortAlg{Base.Sort.MergeSortAlg, Int64, Int64}, Base.Order.By{CRISPRofftargetHunter.var"#47#52", Base.Order.ForwardOrdering}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{ThreadsX.Implementations.var"#93#94"{Base.Order.By{CRISPRofftargetHunter.var"#47#52", Base.Order.ForwardOrdering}, Int64, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}}})
precompile(Tuple{ThreadsX.Implementations.var"##_map#72", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.Implementations._map), Function, Base.Iterators.Zip{Tuple{Array{CRISPRofftargetHunter.Path, 1}, Array{Int64, 1}}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#48#53"}, Base.Iterators.Zip{Tuple{Array{CRISPRofftargetHunter.Path, 1}, Array{Int64, 1}}}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#48#53"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.Iterators.Zip{Tuple{Base.SubArray{CRISPRofftargetHunter.Path, 1, Array{CRISPRofftargetHunter.Path, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#48#53"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#48#53"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.Path, 1}, Base.Iterators.Zip{Tuple{Array{CRISPRofftargetHunter.Path, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Array{CRISPRofftargetHunter.Path, 1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#230#232"{Int64, CRISPRofftargetHunter.MotifPathTemplates}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{CRISPRofftargetHunter.Path, 1}, 1}, Array{CRISPRofftargetHunter.Path, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#230#232"{Int64, CRISPRofftargetHunter.MotifPathTemplates}}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{CRISPRofftargetHunter.Path, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{CRISPRofftargetHunter.Path, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Path, Symbol})
precompile(Tuple{typeof(Base.count), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.FMIndexes.FMIndex{4, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Path, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{CRISPRofftargetHunter.Path, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Sort.var"#defalg##kw", NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#127#129"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#127#129"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#69#72"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#69#72"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#69#72"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#69#72"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#69#72"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, UInt8, Array{UInt32, 1}, Bool})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned}, Tuple{UInt8, Array{UInt32, 1}, Bool}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned}, Tuple{UInt8, Array{UInt32, 1}, Bool}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#70#73"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#70#73"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.findall), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#70#73"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, CRISPRofftargetHunter.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, CRISPRofftargetHunter.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#70#73"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#70#73"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.Loc{UInt8, UInt32}, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{CRISPRofftargetHunter.PrefixDB, 1}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#75#80", Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#75#80"}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#75#80"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.PrefixDB, 1, Array{CRISPRofftargetHunter.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#75#80"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#75#80"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#75#80"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#76#81", Array{CRISPRofftargetHunter.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#76#81"}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#76#81"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.PrefixDB, 1, Array{CRISPRofftargetHunter.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#76#81"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#76#81"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixDB, 1}, CRISPRofftargetHunter.var"#76#81"}})
precompile(Tuple{typeof(Base.unique), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#77#82"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}})
precompile(Tuple{typeof(Base.isbits), Any})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#77#82"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#77#82"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UnionAll})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#77#82"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#77#82"{String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}, Array{CRISPRofftargetHunter.PrefixDB, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Nothing, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Nothing, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Nothing, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#127#129"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#127#129"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(ThreadsX.map), Function, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#128#130"{String, CRISPRofftargetHunter.DBInfo}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#128#130"{String, CRISPRofftargetHunter.DBInfo}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#128#130"{String, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{UnionAll}})
precompile(Tuple{Type{Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, CRISPRofftargetHunter.Loc{UInt8, UInt32}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.PrefixDB, Symbol})
precompile(Tuple{typeof(Base.append!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.append!), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#128#130"{String, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#128#130"{String, CRISPRofftargetHunter.DBInfo}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.LinearDB, Symbol})
precompile(Tuple{typeof(Base.first), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.mapreduce), Function, Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.LinearDB}})
precompile(Tuple{Type{NamedTuple{(:init, :basesize), T} where T<:Tuple}, Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}})
precompile(Tuple{Transducers.var"#foldxt##kw", NamedTuple{(:init, :basesize), Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}}, typeof(Transducers.foldxt), typeof(Base.:(+)), Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, InitialValues.InitialValueOf{typeof(Base.:(+))}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#131#133"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#131#133"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Function, Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#132#134", Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#132#134"}})
precompile(Tuple{typeof(Base.all), Array{Bool, 1}})
precompile(Tuple{Type{Array{Base.UnitRange{UInt32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.SuffixDB, Symbol})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.suffix_align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), Base.UnitRange{UInt32}, Symbol})
precompile(Tuple{Base.Colon, UInt32, UInt32})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Symbol})
precompile(Tuple{typeof(Base.string), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{String}})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.decode), CRISPRofftargetHunter.Loc{UInt8, UInt32}, CRISPRofftargetHunter.DBInfo})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(Base.iterate), Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#136#141"{String, String, Int64, CRISPRofftargetHunter.LinearDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Int64, 2}})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#137#142"{String}, String, Vararg{String}})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#139#144"{Base.IOStream}, String, Vararg{String}})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{Int64, 2}, Symbol})
precompile(Tuple{typeof(DataFrames.rename!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{Type{InlineStrings.String15}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String15, 1, S, V, A} where A<:AbstractArray{InlineStrings.String15, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{InlineStrings.String15}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{InlineStrings.String15, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, InlineStrings.String15, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{Type{InlineStrings.String1}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String1, 1, S, V, A} where A<:AbstractArray{InlineStrings.String1, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}, InlineStrings.String1, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String15}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String1}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Type{Array{Any, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 2}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt64, 1}, Array{UInt32, 1}})
precompile(Tuple{Type{Base.IdDict{UInt64, UInt32}}, Base.Iterators.Zip{Tuple{Array{UInt64, 1}, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{UInt64, UInt32}, Any, Any})
precompile(Tuple{Type{CRISPRofftargetHunter.DictDB}, Base.IdDict{UInt64, UInt32}, CRISPRofftargetHunter.MotifPathTemplates, CRISPRofftargetHunter.DBInfo, Nothing})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.IdDict{UInt64, UInt32}})
precompile(Tuple{typeof(Serialization.deserialize_dict), Serialization.Serializer{Base.IOStream}, Type{Base.IdDict{UInt64, UInt32}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.DictDB, Symbol})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#85#90"{Int64}, typeof(Base.vcat), Base.IndexLinear, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#86#91"{CRISPRofftargetHunter.DictDB}, typeof(Base.:(+)), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.get), Base.IdDict{UInt64, UInt32}, Any, Any})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt32})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#87#92"{CRISPRofftargetHunter.DictDB}, typeof(Base.:(+)), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.:(+)), UInt32, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}}})
precompile(Tuple{Type{Base.IdDict{UInt64, UInt8}}, Base.Iterators.Zip{Tuple{Array{UInt64, 1}, Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{UInt64, UInt8}, Any, Any})
precompile(Tuple{typeof(Base.values), Base.IdDict{UInt64, UInt8}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.IdDict{UInt64, UInt8}}})
precompile(Tuple{typeof(Base.:(>=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{UInt8, Int64}, Any, Any})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.IdDict{UInt64, UInt8}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{UInt64, UInt8}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{UInt64, UInt8}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{UInt64, UInt8}, Int64, Int64})
precompile(Tuple{typeof(Base.:(>)), UInt8, UInt8})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt64, Int64})
precompile(Tuple{typeof(Base.push!), CRISPRofftargetHunter.BloomFilter, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{UInt64, UInt8}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.BinDB{T} where T<:Unsigned}, Array{CRISPRofftargetHunter.BloomFilter, 1}, Array{UInt8, 1}, CRISPRofftargetHunter.MotifPathTemplates, CRISPRofftargetHunter.DBInfo, Nothing})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CRISPRofftargetHunter.BloomFilter, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Base.IdDict{UInt64, UInt8}})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{Type{Array{CRISPRofftargetHunter.BloomFilter, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.BloomFilter, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CRISPRofftargetHunter.BloomFilter, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CRISPRofftargetHunter.BloomFilter, 1}, CRISPRofftargetHunter.BloomFilter, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.BinDB{UInt8}, Symbol})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#171#177"{Int64}, typeof(Base.vcat), Base.IndexLinear, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#172#178"{Bool, CRISPRofftargetHunter.BinDB{UInt8}}, typeof(Base.:(+)), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CRISPRofftargetHunter.var"#173#179"{Bool, CRISPRofftargetHunter.BinDB{UInt8}}, typeof(Base.:(+)), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Bool, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{21, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{21, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{21, 2}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{21, 2}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{21, 2}, T, 2, L} where L where T}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.AmbigIdx}, StaticArrays.SArray{Tuple{21, 2}, BioSymbols.DNA, 2, 42}, Nothing})
precompile(Tuple{Type{CRISPRofftargetHunter.HashDB{T, K} where K<:Union{UInt16, UInt32, UInt8} where T<:Unsigned}, CRISPRofftargetHunter.DBInfo, CRISPRofftargetHunter.MotifPathTemplates, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Array{UInt8, 1}, CRISPRofftargetHunter.AmbigIdx})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#188#192"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#188#192"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(21, 2)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{21, 2}, BioSymbols.DNA, 2, 42}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#188#192"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#188#192"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#189#193"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#189#193"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}}})
precompile(Tuple{typeof(Base._similar_for), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Type{Base.BitArray{1}}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#189#193"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.BitArray{1}, 1}, Base.BitArray{1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#189#193"{CRISPRofftargetHunter.HashDB{UInt8, UInt16}}}, Int64})
precompile(Tuple{typeof(CSV.findrowstarts!), Array{UInt8, 1}, Parsers.Options, Array{Int64, 1}, Int64, Array{CSV.Column, 1}, Any, Base.Dict{Type, Type}, Bool, Int64})
precompile(Tuple{CSV.var"#16#17"{Array{UInt8, 1}, Parsers.Options, Array{Int64, 1}, Int64, Array{CSV.Column, 1}, DataType, Base.Dict{Type, Type}, Bool, Int64, Array{Type, 1}, Base.ReentrantLock, Base.Threads.Atomic{Bool}, Base.Threads.Atomic{Int64}, Base.Threads.Atomic{Int64}, Int64}})
precompile(Tuple{typeof(CSV.findchunkrowstart), Array{Int64, 1}, Int64, Array{UInt8, 1}, Parsers.Options, Base.Dict{Type, Type}, Bool, Int64, Int64, Array{CSV.Column, 1}, Array{Type, 1}, Base.ReentrantLock, Any, Base.Threads.Atomic{Int64}, Base.Threads.Atomic{Int64}, Base.Threads.Atomic{Bool}})
precompile(Tuple{typeof(Base.lock), CSV.var"#14#15"{Base.Dict{Type, Type}, Int64, Array{CSV.Column, 1}, DataType, Array{CSV.ColumnProperties, 1}}, Base.ReentrantLock})
precompile(Tuple{CSV.var"#14#15"{Base.Dict{Type, Type}, Int64, Array{CSV.Column, 1}, DataType, Array{CSV.ColumnProperties, 1}}})
precompile(Tuple{typeof(Base.something), Nothing, Type})
precompile(Tuple{typeof(CSV.promote_types), Any, Any})
precompile(Tuple{typeof(Base.something), Type, Type})
precompile(Tuple{typeof(Base.get), Base.Dict{Type, Type}, Type, Type})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Type})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{CSV.var"#27#32"{CSV.Context, Array{Int64, 1}, Array{Array{CSV.Column, 1}, 1}, Base.ReentrantLock, Int64, Int64}})
precompile(Tuple{Type{CSV.Column}, Type, Bool, Bool, Bool, Tuple{Float64, Int64}, Bool})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String3, 1, S, V, A} where A<:AbstractArray{InlineStrings.String3, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{InlineStrings.String3}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{InlineStrings.String3, 1, UInt8, Array{UInt8, 1}, false}, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String3, 1, InlineStrings.String3, Base.Missing, Array{InlineStrings.String3, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{var"#s77", 1} where var"#s77"}, SentinelArrays.SentinelArray{InlineStrings.String3, 1, InlineStrings.String3, Base.Missing, Array{InlineStrings.String3, 1}}})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String3, 1, InlineStrings.String3, Base.Missing, Array{InlineStrings.String3, 1}}, Int64})
precompile(Tuple{typeof(CSV.reallocate!), Any, Int64})
precompile(Tuple{CSV.var"#28#33"{CSV.Context, Array{Int64, 1}, Array{Array{CSV.Column, 1}, 1}, Int64, Int64, CSV.Column, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CSV.var"#42#43"{Array{Array{CSV.Column, 1}, 1}, Int64}}})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String1}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CSV.var"#42#43"{Array{Array{CSV.Column, 1}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String15}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String31}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{SentinelArrays.var"#newsentinel!##kw", NamedTuple{(:force,), Tuple{Bool}}, typeof(SentinelArrays.newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.makechain!), Type{InlineStrings.String31}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64})
precompile(Tuple{SentinelArrays.var"##newsentinel!#1", Bool, typeof(SentinelArrays.newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.makechain!), Type{Int64}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#47#51"{Array{Array{CSV.Column, 1}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{InlineStrings.String31, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.length), SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{InlineStrings.String31, 1}, 1}, Array{InlineStrings.String31, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#47#51"{Array{Array{CSV.Column, 1}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String3}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{InlineStrings.String31, 1}, 1}})
precompile(Tuple{typeof(Base.length), SentinelArrays.ChainedVector{InlineStrings.String31, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.ChainedVector{InlineStrings.String31, Array{InlineStrings.String31, 1}}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{InlineStrings.String31, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{String}, Tuple{Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.asguide), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{InlineStrings.String31, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.asguide), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{InlineStrings.String31, 1}}}}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{InlineStrings.String31, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Main.countspaces), Tuple{Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.countspaces), Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{typeof(Main.ldb_start), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{String, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, InlineStrings.String1})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, InlineStrings.String15})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 2}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{UInt64, UInt32}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{UInt64, UInt32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{UInt64, UInt32}, Int64, Int64})
precompile(Tuple{typeof(Base.:(<=)), UInt32, UInt8})
precompile(Tuple{typeof(Base.:(!=)), UInt8, UInt32})
precompile(Tuple{typeof(Base.iterate), Base.IdDict{UInt64, UInt32}, Int64})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), Base.IdDict{UInt64, UInt32}})
precompile(Tuple{typeof(Base.string), String, Float64})
precompile(Tuple{typeof(Base.:(<=)), UInt32, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#150#151"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#150#151"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#150#151"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#150#151"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.zeros), Type{UInt32}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.zeros), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.ones), Type{UInt32}, Int64})
precompile(Tuple{typeof(Base.isequal), Int64})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{UInt32, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, UInt32})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.pop!), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.dotview), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CRISPRofftargetHunter.var"#146#148"{Array{UInt32, 1}, Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Base.UnitRange{Int64}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#147#149"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#147#149"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#147#149"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.UnitRange{Int64}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#147#149"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Node, 1}, Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#147#149"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CRISPRofftargetHunter.Node, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.reshape), Array{CRISPRofftargetHunter.Node, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.TreeDB, Symbol})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#155#160"{String, String, Int64, CRISPRofftargetHunter.TreeDB}})
precompile(Tuple{Transducers.var"#foldxt##kw", NamedTuple{(:init, :basesize), Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}}, typeof(Transducers.foldxt), typeof(Base.:(+)), Transducers.Map{CRISPRofftargetHunter.var"#155#160"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#155#160"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, InitialValues.InitialValueOf{typeof(Base.:(+))}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#152#153"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#152#153"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{Type{Array{CRISPRofftargetHunter.Node, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.Node, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CRISPRofftargetHunter.Node, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CRISPRofftargetHunter.Node, 1}, CRISPRofftargetHunter.Node, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.SuffixTreeDB, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{CRISPRofftargetHunter.Node, 1}, UInt32})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Node, Symbol})
precompile(Tuple{typeof(Base.:(!=)), UInt32, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, UInt8})
precompile(Tuple{typeof(Base.push!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(Base.:(>)), Int64, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#155#160"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#155#160"{String, String, Int64, CRISPRofftargetHunter.TreeDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#156#161"{String}, String, Vararg{String}})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#158#163"{Base.IOStream}, String, Vararg{String}})
precompile(Tuple{DataFrames.var"##_join#572", Array{Symbol, 1}, Symbol, Bool, Nothing, Tuple{Bool, Bool}, typeof(Base.identity), typeof(Base.identity), Symbol, typeof(DataFrames._join), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames._check_consistency), DataFrames.DataFrame})
precompile(Tuple{DataFrames.var"##manipulate#506", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.allunique), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, DataFrames.var"#35#36"{DataFrames.Index}}})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, Array{Int64, 1}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#560#561", PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#560#561", Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#560#561", PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#560#561", PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.preprocess_columns), DataFrames.DataFrameJoiner})
precompile(Tuple{typeof(Base.eachcol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Int64})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.refpool), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.invrefpool), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{InlineStrings.String31, 1}, Base.Dict{InlineStrings.String31, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.Dict{InlineStrings.String31, UInt32}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(DataAPI.refarray), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{Int64, 1}, Array{Int64, 1}, Nothing, Nothing})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.refpool), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.invrefpool), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{InlineStrings.String15, 1}, Base.Dict{InlineStrings.String15, UInt32}})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.Dict{InlineStrings.String15, UInt32}})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.refpool), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataAPI.invrefpool), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{InlineStrings.String1, 1}, Base.Dict{InlineStrings.String1, UInt32}})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.Dict{InlineStrings.String1, UInt32}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.length), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{var"#s77", 1} where var"#s77", 1}, Array{AbstractArray{var"#s77", 1} where var"#s77", 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{UInt32, 1}, Array{Int64, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{DataFrames.OnCol{T, N} where N where T}, Array{UInt32, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._all), DataFrames.var"#596#598", Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._all), DataFrames.var"#597#599"{Int64}, Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}}, Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.isempty), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.issorted), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(DataFrames._semijoin_unsorted), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.BitArray{1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.floor), Float64})
precompile(Tuple{Type{Int64}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#98#103"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#98#103"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}})
precompile(Tuple{typeof(Base._similar_for), Array{String, 1}, Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#98#103"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#98#103"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CRISPRofftargetHunter.DBInfo}}, Int64})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 3}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.length), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{ProgressMeter.ProgressWrapper{T} where T}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, ProgressMeter.Progress})
precompile(Tuple{typeof(Base.iterate), ProgressMeter.ProgressWrapper{Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#99#104"})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#99#104"}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#99#104"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#99#104"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Base.BitArray{1}, 1}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#99#104"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Base.BitArray{1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Base.BitArray{1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{ThreadsX.Implementations.var"##map#74", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, CRISPRofftargetHunter.Loc{UInt8, UInt32}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt8, 1}, Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.isempty), Array{UInt8, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{UInt8, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.reshape), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, CRISPRofftargetHunter.Loc{UInt8, UInt32}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt32, 1}, Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt32, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.isempty), Array{UInt32, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{UInt32, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.reshape), Array{UInt32, 1}, Tuple{Int64}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#102#107"}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#102#107"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#102#107"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#102#107"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Type{Base.BitArray{1}}, Array{Bool, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.MotifPos}, Array{UInt8, 1}, Array{UInt32, 1}, Base.BitArray{1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}, Int64, Base.BitArray{2}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), ProgressMeter.ProgressWrapper{Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Int64})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Vararg{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#100#105"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt8, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#101#106"}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{UInt32, 1}, Array{CRISPRofftargetHunter.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.MotifDB, Symbol})
precompile(Tuple{typeof(Base.first), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#115#121"{Int64, CRISPRofftargetHunter.MotifDB}})
precompile(Tuple{Transducers.var"#tcollect##kw", NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CRISPRofftargetHunter.var"#115#121"{Int64, CRISPRofftargetHunter.MotifDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#115#121"{Int64, CRISPRofftargetHunter.MotifDB}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#115#121"{Int64, CRISPRofftargetHunter.MotifDB}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#115#121"{Int64, CRISPRofftargetHunter.MotifDB}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(ThreadsX.mapreduce), Function, Function, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CRISPRofftargetHunter.var"#116#122"{String, Int64, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.MotifDB}})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any}})
precompile(Tuple{Transducers.var"#foldxt##kw", NamedTuple{(:init, :basesize), Tuple{InitialValues.InitialValueOf{typeof(Base.:(+))}, Int64}}, typeof(Transducers.foldxt), typeof(Base.:(+)), Transducers.Map{CRISPRofftargetHunter.var"#116#122"{String, Int64, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.MotifDB}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#116#122"{String, Int64, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.MotifDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, InitialValues.InitialValueOf{typeof(Base.:(+))}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#108#111"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CRISPRofftargetHunter.var"#108#111"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#109#112", Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#109#112"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#110#113"{Int64}, Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CRISPRofftargetHunter.var"#110#113"{Int64}}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.MotifPos, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, UInt8})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.string), UInt32})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#116#122"{String, Int64, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.MotifDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#116#122"{String, Int64, String, Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CRISPRofftargetHunter.MotifDB}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.:(+))}}}, Array{Int64, 2}})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#117#123"{String}, String, Vararg{String}})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CRISPRofftargetHunter.var"#119#125"{Base.IOStream}, String, Vararg{String}})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.shrink_and_expand!), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.BitArray{1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Base.BitArray{1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Base.BitArray{1}, Int64}}})
precompile(Tuple{typeof(Base.:(==)), Base.BitArray{1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{UInt32}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{UInt32}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.is_in_range), Array{UInt32, 1}, Base.BitArray{1}, Array{Int64, 1}, Bool, Bool, Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Int64})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{BioSequences.var"#@dna_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(BioSequences.remove_newlines), String})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, String})
precompile(Tuple{Base.var"#@show", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(CRISPRofftargetHunter.isinclusive), BioSymbols.DNA, BioSymbols.DNA})
precompile(Tuple{typeof(CRISPRofftargetHunter.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(CRISPRofftargetHunter.isinclusive)})
precompile(Tuple{typeof(CRISPRofftargetHunter.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(BioSymbols.iscompatible)})
precompile(Tuple{typeof(CRISPRofftargetHunter.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Function})
precompile(Tuple{typeof(Base.count), Function, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(BioSequences.count_naive), Base.var"#84#85"{typeof(CRISPRofftargetHunter.isinclusive)}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.levenshtein), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, typeof(CRISPRofftargetHunter.isinclusive)})
precompile(Tuple{typeof(CRISPRofftargetHunter.pa_sa), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.Aln, Symbol})
precompile(Tuple{typeof(Base.rand), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.getseq), Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(BioSequences.count_naive), Base.var"#84#85"{typeof(Base.isequal)}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.getseq)})
precompile(Tuple{typeof(Base.copy), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.lastindex), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.prefix_align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.suffix_align!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.:(==)), CRISPRofftargetHunter.Aln, CRISPRofftargetHunter.Aln})
precompile(Tuple{typeof(Base.:(!=)), CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{Main.var"#mutate_suffix!#1", BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.suffix_align!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), CRISPRofftargetHunter.Aln, CRISPRofftargetHunter.Aln})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{Base.Enums.var"#@enum", LineNumberNode, Module, Union{Expr, Symbol}, Vararg{Any}})
precompile(Tuple{Core.var"#@__doc__", LineNumberNode, Module, Any})
precompile(Tuple{Type{Main.Nuc}, Int32})
precompile(Tuple{typeof(Base.vect), UInt8, Vararg{UInt8}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{1, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{1, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Random.set_global_seed!), Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{2, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{2, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{Base.Colon, UInt8, UInt8})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{24}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{UInt8}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt32, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Main.Nuc, Vararg{Main.Nuc}})
precompile(Tuple{Type{Main.DNASeq}, Array{Main.Nuc, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Main.DNASeq, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Main.DNASeq, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{8}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{16}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt16, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt16, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt16, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{10}})
precompile(Tuple{Type{NamedTuple{(:mmap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:mmap,), Tuple{Bool}}, Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Mmap.mmap), Type{Array{UInt16, 1}}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String})
precompile(Tuple{typeof(Base.CoreLogging._invoked_shouldlog), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Array{UInt8, 1}}, String})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{7, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{7, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{2, UInt8}})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{typeof(Base.count), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, String, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, String, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt16, 1}})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.count), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locate), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(Base.:(|>)), CRISPRofftargetHunter.FMIndexes.LocationIterator{7, UInt8}, typeof(Base.collect)})
precompile(Tuple{typeof(Base.:(|>)), Array{Any, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(Base.:(|>)), Array{Int64, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.isempty), CRISPRofftargetHunter.FMIndexes.LocationIterator{7, UInt8}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{2, UInt16}})
precompile(Tuple{Main.var"#linear_search#2", Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Combinatorics.permutations), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.iterate), Combinatorics.Permutations{Array{UInt8, 1}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), Array{UInt8, 1}, CRISPRofftargetHunter.FMIndexes.FMIndex{2, UInt8}})
precompile(Tuple{typeof(Base.iterate), Combinatorics.Permutations{Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.read), String})
precompile(Tuple{typeof(Base.copy), Array{UInt8, 1}})
precompile(Tuple{Type{NamedTuple{(:r,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:r,), Tuple{Int64}}, Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, String})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, Base.CodeUnits{UInt8, String}, Array{UInt16, 1}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.FMIndex{w, T} where T where w}, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt16, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.count), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.locateall), String, CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{Main.var"#linear_search_#3", String, String})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.restore), CRISPRofftargetHunter.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{Type{CRISPRofftargetHunter.Motif}, String})
precompile(Tuple{typeof(CRISPRofftargetHunter.build_motifTemplates), CRISPRofftargetHunter.Motif})
precompile(Tuple{Type{NamedTuple{(:dist,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{CRISPRofftargetHunter.var"#templates_to_sequences##kw", NamedTuple{(:dist,), Tuple{Int64}}, typeof(CRISPRofftargetHunter.templates_to_sequences), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CRISPRofftargetHunter.MotifPathTemplates})
precompile(Tuple{typeof(Base.length), Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.comb_of_d1_extended_ref), String})
precompile(Tuple{typeof(Base.collect), Base.Set{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#4#8"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, Main.var"#4#8"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{typeof(Base.map), Function, Array{CRISPRofftargetHunter.Aln, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#6#11"{Main.var"#remove_gap#9"}, Array{CRISPRofftargetHunter.Aln, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.Aln, 1}, Base.Generator{Array{CRISPRofftargetHunter.Aln, 1}, Main.var"#6#11"{Main.var"#remove_gap#9"}}})
precompile(Tuple{typeof(Base.map), Function, Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#7#12", Array{CRISPRofftargetHunter.Path, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CRISPRofftargetHunter.Path, 1}, Base.Generator{Array{CRISPRofftargetHunter.Path, 1}, Main.var"#7#12"}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.Filesystem.mktemp)})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.IOStream}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.IOStream}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vararg{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Main.TestSeq}, Bool, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.save), Main.TestSeq, String})
precompile(Tuple{typeof(Base.getproperty), Main.TestSeq, Symbol})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.combinestrings), String, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.EachStringIndex{String}, CRISPRofftargetHunter.var"#31#32"{String, String, typeof(CRISPRofftargetHunter.notX)}}})
precompile(Tuple{CRISPRofftargetHunter.var"#31#32"{String, String, typeof(CRISPRofftargetHunter.notX)}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.DBInfo}, String, String, CRISPRofftargetHunter.Motif})
precompile(Tuple{Type{CRISPRofftargetHunter.Loc{UInt8, UInt32}}, Int64, Int64, Bool})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{4, 4}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{4, 4}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{4, 4}, T, 2, L} where L where T}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.AmbigIdx}, StaticArrays.SArray{Tuple{4, 4}, BioSymbols.DNA, 2, 16}, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.Size{(4, 4)}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{4, 4}, BioSymbols.DNA, 2, 16}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getproperty), CRISPRofftargetHunter.AmbigIdx, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.BitArray{1}})
precompile(Tuple{Core.var"#@int128_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.parse), Type{Int128}, String})
precompile(Tuple{Test.var"#@test_throws", LineNumberNode, Module, Any, Any})
precompile(Tuple{Type{UInt16}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.safeadd), UInt16, UInt16})
precompile(Tuple{typeof(Base.:(==)), UInt16, UInt16})
precompile(Tuple{typeof(Base.:(-)), UInt16, UInt16})
precompile(Tuple{typeof(CRISPRofftargetHunter.smallestutype), UInt64})
precompile(Tuple{Type{Unsigned}, Int128})
precompile(Tuple{typeof(CRISPRofftargetHunter.smallestutype), UInt128})
precompile(Tuple{typeof(CRISPRofftargetHunter.base_to_idx), Char})
precompile(Tuple{Type{Test.Threw}, Any, Union{Nothing, Array{Any, 1}}, LineNumberNode})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{typeof(CRISPRofftargetHunter.getseq), Int64, Array{Char, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.extension), String})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{typeof(CRISPRofftargetHunter.minkmersize), Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{6}})
precompile(Tuple{typeof(Base.repeat), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Combinatorics.multiset_permutations), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#13#15", Combinatorics.MultiSetPermutations{Array{Char, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Combinatorics.MultiSetPermutations{Array{Char, 1}}, Main.var"#13#15"}})
precompile(Tuple{typeof(Base.rand), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#14#16"{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, Main.var"#14#16"{String}}})
precompile(Tuple{typeof(Base.isstructtype), Type})
precompile(Tuple{typeof(Base.map), Transducers.AutoObjectsReStacker.var"#4#7", Tuple{Symbol}})
precompile(Tuple{typeof(Base.map), Transducers.AutoObjectsReStacker.var"#4#7", Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(CRISPRofftargetHunter.comb_of_d), String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.Set{String}, Base.Set{String}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Set{String}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{String, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{String, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{String, 1}})
precompile(Tuple{typeof(Transducers.unreduced), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CRISPRofftargetHunter.var"#4#6"{String, Int64}, Array{String, 1}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#4#6"{String, Int64}}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#4#6"{String, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#4#6"{String, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#4#6"{String, Int64}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Base.Generator{Array{String, 1}, CRISPRofftargetHunter.var"#4#6"{String, Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{String, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Transducers.foldxt), typeof(Base.union), Transducers.Map{CRISPRofftargetHunter.var"#3#5"{Array{Char, 1}}}, Base.Set{String}})
precompile(Tuple{Transducers.var"#167#168"{Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#3#5"{Array{Char, 1}}}, Transducers.BottomRF{Transducers.Completing{InitialValues.AdjoinIdentity{typeof(Base.union)}}}}, Transducers.InitOf{Transducers.DefaultInitOf{OP} where OP}, Transducers.NoopDACContext, Transducers.SizedReducible{SplittablesBase.Implementations.DictView{Base.Dict{String, Nothing}, typeof(Base.first)}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#3#5"{Array{Char, 1}}}, Transducers.BottomRF{Transducers.Completing{InitialValues.AdjoinIdentity{typeof(Base.union)}}}}, Base.Set{String}, Base.Set{String}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CRISPRofftargetHunter.var"#3#5"{Array{Char, 1}}}, Transducers.BottomRF{Transducers.Completing{InitialValues.AdjoinIdentity{typeof(Base.union)}}}}, Base.Set{String}})
precompile(Tuple{typeof(Transducers.unreduced), Base.Set{String}})
precompile(Tuple{typeof(CRISPRofftargetHunter.locate_telomeres), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.isempty), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ambig_max,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Base.var"#findall##kw", NamedTuple{(:ambig_max,), Tuple{Int64}}, typeof(Base.findall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.length), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{BioSequences.EncodeError{A, T} where T where A<:BioSequences.Alphabet}, BioSequences.DNAAlphabet{2}, BioSymbols.DNA})
precompile(Tuple{Type{String}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.convert), Type{UInt128}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.convert), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt128})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt128, Int64})
precompile(Tuple{typeof(Base.vect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.all_kmers), Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 2}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 4}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 5}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 6}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(CRISPRofftargetHunter.as_kmers), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Base.push!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.isempty), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{w, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned where w}, Array{UInt8, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{8, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{8, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.freq), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{w, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned where w}, Array{UInt64, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt64, 1}})
precompile(Tuple{Type{IntArrays.IntArray{64, T, 1} where T}, Array{UInt64, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{64, UInt64, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Base.length), Array{UInt64, 1}})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt64, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt64, 1}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#17#23"{UInt64}, Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt64, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt64, Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#18#24"{UInt8}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}, UInt8})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt8, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt8, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{UInt32}, Int64})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt32, 1}})
precompile(Tuple{Type{IntArrays.IntArray{17, T, 1} where T}, Array{UInt32, 1}})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{17, UInt32, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt32, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#19#25"{UInt32}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}, UInt32})
precompile(Tuple{typeof(CRISPRofftargetHunter.FMIndexes.WaveletMatrices.select), UInt32, CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt32, Array{UInt32, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:destructive,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:destructive,), Tuple{Bool}}, Type{CRISPRofftargetHunter.FMIndexes.WaveletMatrices.WaveletMatrix{2, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.rand), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base._simple_count), Main.var"#20#26"{UInt8}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base._simple_count), Main.var"#21#27"{UInt8}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._simple_count), Main.var"#22#28"{UInt8}, Array{UInt8, 1}, Int64})
